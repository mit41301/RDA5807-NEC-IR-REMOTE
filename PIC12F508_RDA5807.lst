MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002  TITLE      PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
                      00003  SUBTITLE       PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
                      00004 ; CONTENTS:  I²C RDA5807M + IR REMOTE Control                                  *
                      00005 ; EDITOR:    @mit41301                                                         *
                      00006 ; UPDATED:   15/08/2025                                                        *
                      00007 ;*******************************************************************************
                      00008  
                      00009  Radix DEC
0200   0005 0008 0000 00010  __idlocs H'5807'
       0007 
0FFF   0FEA           00011  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF;
                      00012 
                      00013  ifdef __10F200
                      00014  Processor 10f200 
                      00015  include "p10F200.inc"
                      00016  list    p=10F200
                      00017  endif
                      00018 
                      00019  ifdef __10F202
                      00020  Processor 10f202
                      00021  include "p10F202.inc"
                      00022  list    p=10F202
                      00023  endif
                      00024 
                      00025  ifdef __10F204
                      00026  Processor 10f204
                      00027  include "p10F204.inc"
                      00028  list    p=10F204
                      00029  endif
                      00030 
                      00031  ifdef __10F206
                      00032  Processor 10f206
                      00033  include "p10F206.inc"
                      00034  list    p=10F206
                      00035  endif
                      00036      
                      00037  ifdef __12F508
                      00038  Processor 12f508
                      00039  include "p12F508.inc"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC12F508 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00157         LIST
                      00040  list    p=12F508
                      00041  endif
                      00042 
                      00043  ifdef __12F509
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  2
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044  Processor 12f509
                      00045  include "p12F509.inc"
                      00046  list    p=12F509
                      00047  endif
                      00048 
                      00049  errorlevel +205,+207,+302,+305,+306
                      00050 
                      00051 ;*******************************************************************************
                      00052 ; File register usage                                                          *
                      00053 ;*******************************************************************************
                      00054      ifdef __10F200
                      00055 RAM     EQU  H'0010'
                      00056 MAXRAM  EQU  H'0020'
                      00057      endif
                      00058      ifdef __10F202
                      00059 RAM     EQU  h'0008'
                      00060 MAXRAM  EQU  H'001F'
                      00061      endif
                      00062      ifdef __10F204
                      00063 RAM     EQU  H'0010'
                      00064 MAXRAM  EQU  H'0020'
                      00065      endif
                      00066      ifdef __10F206
                      00067 RAM     EQU  h'0008'
                      00068 MAXRAM  EQU  H'001F'
                      00069      endif
                      00070      ifdef __12F508
  00000007            00071 RAM     EQU  h'0007'
  0000001F            00072 MAXRAM  EQU  H'001F'
                      00073      endif
                      00074      ifdef __12F509
                      00075 RAM     EQU  H'0007'
                      00076 MAXRAM  EQU  H'003F'
                      00077      endif
                      00078 ;********************************************************************
                      00079                 CBLOCK RAM      
                      00080 ;********************************************************************
  00000007            00081 i           ;EQU    010h    ;Delay variable
  00000008            00082 j           ;EQU    011h    ;Delay variable
  00000009            00083 bit_count   ;EQU    012h    ;Counter of processed bits in I2C
  0000000A            00084 i2c_data    ;EQU    013h    ;Data to receive/transmit via I2C
  0000000B            00085 port        ;EQU    014h    ;Helper register to implement I2C
  0000000C            00086 ack         ;EQU    015h    ;Acknowledgment received from the device
  0000000D            00087 volume      ;EQU    016h    ;Radio volume level
  0000000E            00088 frequency_l ;EQU    017h    ;Frequency low byte
  0000000F            00089 frequency_h ;EQU    0018h    ;Frequency high byte
                      00090 ;********************************************************************
  00000010            00091 _count      ;EQU    019h    ;Saved value of the timer
  00000011            00092 _byte_count ;EQU    01Ah    ;Counter of processed bytes
  00000012            00093 _bit_count  ;EQU    01Bh    ;Counter of processed bits
  00000013            00094 _ir_data:4  ;EQU    01Ch    ;First IR byte
                      00095 ;********************************************************************
  00000017            00096 RAM_            
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  3
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097                 ENDC
                      00098 
                      00099         if RAM_ > MAXRAM
                      00100         error "File register usage OVERFLOW"
                      00101     endif
                      00102 ;###############################################################################
                      00103 
                      00104      ifdef __10F200
                      00105 SDA         EQU    GP2    ;SDA pin of the I2C
                      00106 SCL         EQU    GP1    ;SCL pin of the I2C
                      00107 IRx         EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00108      endif
                      00109 
                      00110      ifdef __10F202
                      00111 SDA         EQU    GP2    ;SDA pin of the I2C
                      00112 SCL         EQU    GP1    ;SCL pin of the I2C
                      00113 IRx         EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00114      endif
                      00115 
                      00116      ifdef __10F204
                      00117 SDA         EQU    GP2    ;SDA pin of the I2C
                      00118 SCL         EQU    GP1    ;SCL pin of the I2C
                      00119 IRx         EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00120      endif
                      00121 
                      00122      ifdef __10F206
                      00123 SDA         EQU    GP2    ;SDA pin of the I2C
                      00124 SCL         EQU    GP1    ;SCL pin of the I2C
                      00125 IRx         EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00126      endif
                      00127 
                      00128      ifdef __12F508 
  00000003            00129 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
  00000004            00130 SCL        EQU    GP4    ;SCL pin of the I²C Bus
  00000005            00131 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00132      endif
                      00133 
                      00134      ifdef __12F509 
                      00135 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00136 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00137 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00138      endif
                      00139 
                      00140 ;###############################################################################
                      00141 ; DEFAULT STARTING FREQUENCY and VOLUME - Enter your own Frequency
                      00142 ;###############################################################################
                      00143 
  00000083            00144 volume_init EQU 0x03 | 1<<7 ;0x80; Initial Volume = 3 // [0..15]
                      00145 
  00000397            00146 freq  EQU d'919'        ;   91.9 MHz
                      00147 ;freq  EQU d'943'       ;   94.3 MHz
                      00148 ;freq  EQU d'1040'      ;  104.0 MHz
                      00149 
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  4
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000229            00150 freqB EQU (freq - 366) ; BAND = 0 : 87~108 MHz (US/Europe)
  0000008A            00151 freqH EQU (freqB >> 2)    ; Frequency = Channel Spacing(kHz) x CHAN + 87.0 MHz
  00000040            00152 freqL EQU ((freqB&3) << 6); ; Shift channel selection for matching register 0x03
                      00153 
0000                  00154         ORG    H'0000'
                      00155  
0000   0EFE           00156     andlw   ~1
0001   0025           00157     movwf   OSCCAL
                      00158 
                      00159  ifdef __10F204
                      00160         movlw  B'00000000'       ;Use as Digital I/O 
                      00161         movwf  CMCON0            ;Disable Digital Comparator function
                      00162  endif
                      00163 
                      00164  ifdef __10F206
                      00165         movlw  0x000             ;Use as Digital I/O 
                      00166         movwf  CMCON0            ;Disable Digital Comparator function
                      00167  endif
                      00168 
0002                  00169 INIT:
0002   0C97           00170     MOVLW  ~((1<<T0CS)|(1<<NOT_GPPU)|(1<<PSA))
0003   0002           00171     OPTION                ;Enable GPIO2 and pull-ups
                      00172 
0004   0C3F           00173         MOVLW  0x3F           ;Save 0x3F into 'port' register
0005   002B           00174     MOVWF  port           ;It's used to switch SDA/SCL pins direction
0006   0006           00175     TRIS   GPIO           ;Set all pins as inputs
                      00176 
0007   0CFF           00177     MOVLW  0xFF           ;Perform 200 ms delay
0008   098D           00178     CALL   DELAY          ;to let the power stabilize
                      00179 ;###############################################################################
0009   0CFF           00180     MOVLW  0xFF           ;Perform 400 ms delay
000A   098D           00181     CALL   DELAY          ;to let the power stabilize
                      00182 
000B   0CFF           00183     MOVLW  0xFF           ;Perform 600 ms delay
000C   098D           00184     CALL   DELAY          ;to let the power stabilize
                      00185 ;
000D   0CFF           00186     MOVLW  0xFF           ;Perform 800 ms delay
000E   098D           00187     CALL   DELAY          ;to let the power stabilize
                      00188 ;###############################################################################
000F   0066           00189     CLRF   GPIO           ;Clear GPIO to set all pins to 0
                      00190 
0010   0C83           00191  movlw volume_init;  0x83 ////////////
0011   0C0D           00192  movlw volume
                      00193 
0012   0C40           00194  movlw freqL ;91.90 MHz
0013   002E           00195  movwf frequency_l
                      00196 
0014   0C8A           00197  movlw freqH ;91.90 MHz
0015   002F           00198  movwf frequency_h
                      00199 ;
0016   0CC0           00200     MOVLW  0xC0           ;Implement AND operation between 0xC0
0017   016E           00201     ANDWF  frequency_l, F ;and 'frequency_l' to clear its last 6 bits
0018   058E           00202     BSF    frequency_l, 4 ;Set bit 4 (Tune) to adjust the frequency
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  5
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00203 
                      00204 ;START_RADIO:              ;Start FM radio
0019   095D           00205     CALL   I2C_START      ;Issue I2C Start condition
001A   0C20           00206     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
001B   0964           00207     CALL   I2C_WRITE_BYTE ;Write the radio address via i2C
001C   0CC0           00208     MOVLW  0xC0           ;Write high byte into radio register 0x02
                      00209 ;   MOVLW  0xD0           ;TEST added to enable BASS 
001D   0964           00210     CALL   I2C_WRITE_BYTE
001E   0C01           00211     MOVLW  0x01           ;Write  low byte into radio register 0x02
001F   0964           00212     CALL   I2C_WRITE_BYTE
0020   020F           00213     MOVF   frequency_h, W ;Write high byte into radio register 0x03
0021   0964           00214     CALL   I2C_WRITE_BYTE
0022   020E           00215     MOVF   frequency_l, W ;Write  low byte into radio register 0x03
0023   0964           00216     CALL   I2C_WRITE_BYTE
0024   0960           00217     CALL   I2C_STOP       ;Issue I2C Stop condition
                      00218 
0025   0C0F           00219     MOVLW  0x0F           ;Implement AND operation between 0xC0
0026   016D           00220     ANDWF  volume, F      ;and 'volume' to clear its higher 4 bits
0027   05ED           00221     BSF    volume, 7      ;Set bit 7  to select correct LNA input
0028   0A30           00222     GOTO   SET_VOLUME     ;And go to the 'SET_VOLUME' label
                      00223 
0029                  00224 LOOP:                     
                      00225 
                      00226 ;BUTTONS_LOOP:             ;Loop while button is pressed
                      00227 
0029                  00228 INCREASE_VOLUME:          ;Otherwise start 'INCREASE_VOLUME'
0029   02AD           00229     INCF   volume, F      ;Increment the 'volume' register
002A   068D           00230     BTFSC  volume, 4      ;If bit 4 becomes set (volume = 0b10010000)
002B   00ED           00231     DECF   volume, F      ;then decrement the 'volume' to get 0b10001111
002C   0A30           00232     GOTO   SET_VOLUME     ;and go to the 'SET_VOLUME' label
002D                  00233 DECREASE_VOLUME:          ;Decrease the volume here
002D   00ED           00234     DECF   volume, F      ;Decrement the 'volume' register
002E   07ED           00235     BTFSS  volume, 7      ;If bit 7 becomes 0 (volume = 0b01111111)
002F   02AD           00236     INCF   volume, F      ;then increment the 'volume' to get 0b10000000
0030                  00237 SET_VOLUME:               ;Set the radio volume
0030   095D           00238     CALL   I2C_START      ;Issue I2C start condition
0031   0C22           00239     MOVLW  0x22           ;Radio chip address for random writing is 0x22
0032   0964           00240     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
0033   0C05           00241     MOVLW  0x05           ;Set the register number to write to (0x05)
0034   0964           00242     CALL   I2C_WRITE_BYTE ;And write it via I2C
0035   0C88           00243     MOVLW  0x88           ;Set the high byte of 0x05 register (default value)
0036   0964           00244     CALL   I2C_WRITE_BYTE ;And write it via i2C
0037   020D           00245     MOVF   volume, W      ;Set the 'volume' as low byte of 0x05 register
0038   0964           00246     CALL   I2C_WRITE_BYTE ;And write it via I2C
0039   0960           00247     CALL   I2C_STOP       ;Issue Stop condition
                      00248 
003A   0A94           00249     GOTO   _LOOP           ;And return to the 'LOOP' label
                      00250 
                      00251 ;CHANNEL_SEEK:             ;Here button is released and we check what to do
                      00252 
003B                  00253 CH_UP:
003B   095D           00254     CALL   I2C_START      ;Issue I2C Start condition
003C   0C20           00255     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  6
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

003D   0964           00256     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
                      00257 
003E   0CC3           00258     MOVLW  0xC3           ;Otherwise set 0xC3 as high byte of 0x02 register
003F   0964           00259     CALL   I2C_WRITE_BYTE ;And write it via I2C
0040   0C01           00260     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
0041   0964           00261     CALL   I2C_WRITE_BYTE ;And write it via I2C
0042   0960           00262     CALL   I2C_STOP       ;Issue I2C Stop condition
0043   0A94           00263     GOTO   _LOOP           ;And return to the 'LOOP' labe;
                      00264 
0044                  00265 SEEK_DOWN:                ;Seek the station down
                      00266 
0044   095D           00267     CALL   I2C_START      ;ADDEDIssue I2C Start condition
0045   0C20           00268     MOVLW  0x20           ;ADDEDRadio chip address for sequential writing is 0x20
0046   0964           00269     CALL   I2C_WRITE_BYTE ;ADDEDWrite the radio address via I2C
                      00270 
0047   0CC1           00271     MOVLW  0xC1           ;Set 0xC1 as high byte of 0x02 register
0048   0964           00272     CALL   I2C_WRITE_BYTE ;Ending of previous transaction
0049   0C01           00273     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
004A   0964           00274     CALL   I2C_WRITE_BYTE ;And write it via I2C
004B   0960           00275     CALL   I2C_STOP       ;Issue I2C Stop condition
004C   0A94           00276     GOTO   _LOOP           ;And return to the 'LOOP' labe;
                      00277 
                      00278 ;-------------Helper subroutines---------------
004D                  00279 SDA_HIGH:                 ;Set SDA pin high
004D   05AB           00280     BSF    port, SDA      ;Set 'sda' bit in the 'port' to make it input
004E   020B           00281     MOVF   port, W        ;Copy 'port' into W register
004F   0006           00282     TRIS   GPIO           ;And set it as TRISGPIO value
0050   0800           00283     RETLW  0
                      00284 
0051                  00285 SDA_LOW:                  ;Set SDA pin low
0051   04AB           00286     BCF    port, SDA      ;Reset 'sda' bit in the 'port' to make it output
0052   020B           00287     MOVF   port, W        ;Copy 'port' into W register
0053   0006           00288     TRIS   GPIO           ;And set it as TRISGPIO value
0054   0800           00289     RETLW  0
                      00290 
0055                  00291 SCL_HIGH:                 ;Set SCL pin high
0055   058B           00292     BSF    port, SCL      ;Set 'scl' bit in the 'port' to make it input
0056   020B           00293     MOVF   port, W        ;Copy 'port' into W register
0057   0006           00294     TRIS   GPIO           ;And set it as TRISGPIO value
0058   0800           00295     RETLW  0
                      00296 
0059                  00297 SCL_LOW:                  ;Set SCL pin low
0059   048B           00298     BCF    port, SCL      ;Reset 'scl' bit in the 'port' to make it output
005A   020B           00299     MOVF   port, W        ;Copy 'port' into W register
005B   0006           00300     TRIS   GPIO           ;And set it as TRISGPIO value
005C   0800           00301     RETLW  0
                      00302 ;-------------I2C start condition--------------
005D                  00303 I2C_START:
005D   0955           00304     CALL   SCL_HIGH       ;Set SCL high
005E   0951           00305     CALL   SDA_LOW        ;Then set SDA low
005F   0800           00306     RETLW  0
                      00307 ;-------------I2C stop condition---------------
0060                  00308 I2C_STOP:
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  7
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0060   0951           00309     CALL   SDA_LOW        ;Set SDA low
0061   0955           00310     CALL   SCL_HIGH       ;Set SCL high
0062   094D           00311     CALL   SDA_HIGH       ;Then set SDA highs and release the bus
0063   0800           00312     RETLW  0
                      00313 ;------------I2C write byte--------------------
0064                  00314 I2C_WRITE_BYTE:
0064   002A           00315     MOVWF  i2c_data       ;Load 'i2c_data' from W register
0065   0C08           00316     MOVLW  8              ;Load value 8 into 'bit_count'
0066   0029           00317     MOVWF  bit_count      ;to indicate we're going to send 8 bits
0067                  00318 I2C_WRITE_BIT:            ;Write single bit to I2C
0067   0959           00319     CALL   SCL_LOW        ;Set SCL low, now we can change SDA
0068   07EA           00320     BTFSS  i2c_data, 7    ;Check the MSB of 'i2c_data'
0069   0A6C           00321     GOTO   I2C_WRITE_0    ;If it's 0 then go to the 'I2C_WRITE_0' label
006A                  00322 I2C_WRITE_1:              ;Else continue with 'I2C_WRITE_1'
006A   094D           00323     CALL   SDA_HIGH       ;Set SDA high
006B   0A6D           00324     GOTO   I2C_SHIFT      ;And go to the 'I2C_SHIFT' label
006C                  00325 I2C_WRITE_0:
006C   0951           00326     CALL   SDA_LOW        ;Set SDA low
006D                  00327 I2C_SHIFT:
006D   0955           00328     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
006E   036A           00329     RLF    i2c_data, F     ;Shift 'i2c_data' one bit to the left
006F   02E9           00330     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0070   0A67           00331     GOTO   I2C_WRITE_BIT  ;If not then return to the 'I2C_WRITE_BIT'
0071                  00332 I2C_CHECK_ACK:            ;Else check the acknowledgement bit
0071   0959           00333     CALL   SCL_LOW        ;Set I2C low to end the last pulse
0072   094D           00334     CALL   SDA_HIGH       ;Set SDA high to release the bus
0073   0955           00335     CALL   SCL_HIGH       ;Set I2C high to start the new pulse
0074   0206           00336     MOVF   GPIO, W        ;Copy the GPIO register value into the 'ack'
0075   002C           00337     MOVWF  ack            ;Now bit 'sda' of the 'ack' will contain ACK bit
0076   0959           00338     CALL   SCL_LOW        ;Set SCL low to end the acknowledgement bit
0077   0800           00339     RETLW  0
                      00340 ;------------I2C read byte--------------------
0078                  00341 I2C_READ_BYTE:
0078   0C08           00342     MOVLW  8              ;Load value 8 into 'bit_count'
0079   0029           00343     MOVWF  bit_count      ;to indicate we're going to receive 8 bits
007A   006A           00344     CLRF   i2c_data       ;Clear the 'i2c_data' register
007B                  00345 I2C_READ_BIT:             ;Read single bit from the I2C
007B   036A           00346     RLF    i2c_data, F    ;Shift the 'i2c_data' register one bit to the left
007C   0959           00347     CALL   SCL_LOW        ;Set SCL low to prepare for the new bit
007D   0955           00348     CALL   SCL_HIGH       ;Set SCL high to read the bit value
007E   06A6           00349     BTFSC  GPIO, SDA      ;Check the 'sda' bit in the GPIO register
007F   050A           00350     BSF    i2c_data, 0    ;if it's 1 then set the LSB of the 'i2c_data'
0080   02E9           00351     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0081   0A7B           00352     GOTO   I2C_READ_BIT   ;If not, then return to the 'I2C_READ_BIT'
0082   0959           00353     CALL   SCL_LOW        ;Set SCL low to end the last pulse
0083   0800           00354     RETLW  0              ;Otherwise return from the subroutine
                      00355 ;----------I2C send ACK----------------------
0084                  00356 I2C_ACK:
0084   0951           00357     CALL   SDA_LOW        ;Set SDA low to issue ACK condition
0085   0955           00358     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
0086   0959           00359     CALL   SCL_LOW        ;Set SCL low to end the pulse
0087   094D           00360     CALL   SDA_HIGH       ;Set SDA high to release the bus
0088   0800           00361     RETLW  0
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  8
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00362 ;----------I2C send NACK----------------------
0089                  00363 I2C_NACK:
0089   094D           00364     CALL   SDA_HIGH       ;Set SDA low to issue NACK condition
008A   0955           00365     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
008B   0959           00366     CALL   SCL_LOW        ;Set SCL low to end the pulse
008C   0800           00367     RETLW  0
                      00368 ;-------------Delay subroutine--------------
008D                  00369 DELAY:                    ;Start DELAY subroutine here  
008D   0027           00370     MOVWF  i              ;Copy the value to the register i
008E   0028           00371     MOVWF  j              ;Copy the value to the register j
008F                  00372 DELAY_LOOP:               ;Start delay loop
008F   02E7           00373     DECFSZ i, F           ;Decrement i and check if it is not zero
0090   0A8F           00374     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0091   02E8           00375     DECFSZ j, F           ;Decrement j and check if it is not zero
0092   0A8F           00376     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0093   0800           00377     RETLW  0              ;Else return from the subroutine
                      00378 ;##############################################################################
                      00379 ;---IR REMOTE CONTROL 38kHz ROUTINE----------------/[NEC]\---------------------
                      00380 ;##############################################################################
0094                  00381 _LOOP:                    ;Main loop of the program
                      00382 ;---------------Wait for the preamble positive pulse---------------------
0094   0666           00383     BTFSC GPIO, IRx       ;Wait while 'ir' pin goes down
0095   0A94           00384     GOTO _LOOP           ;If it's high then return to 'LOOP'
0096   0061           00385     CLRF  TMR0           ;Otherwise clear the timer register
0097   0766           00386     BTFSS GPIO, IRx       ;And wait while 'ir' is low
0098   0A97           00387     GOTO  $-1
0099   0201           00388     MOVF  TMR0, W        ;Copy the TMR0 value into the W register
009A   0030           00389     MOVWF _count         ;and save the value into the 'count' register
009B   0C1E           00390     MOVLW d'30'          ;Load 30 into W (256 us x 32 = 7.7 ms)
009C   0090           00391     SUBWF _count, W      ;And subtract W from 'count'
009D   0703           00392     BTFSS STATUS, C      ;If 'count' < 30 (pulse is shorter than 7.7 ms)
009E   0A94           00393     GOTO  _LOOP          ;then return to 'LOOP'
009F   0C2D           00394     MOVLW d'45'          ;Load 45 into W (256 us x 45 = 11.5 ms)
00A0   0090           00395     SUBWF _count, W      ;And subtract W from 'count'
00A1   0603           00396     BTFSC STATUS, C      ;If 'count' > 45 (pulse is longer than 8 ms)
00A2   0A94           00397     GOTO _LOOP           ;then return to 'LOOP'
                      00398 ;---------------Check the preamble negative pulse---------------------
00A3   0061           00399     CLRF TMR0            ;Otherwise clear the timer register
00A4   0666           00400     BTFSC GPIO, IRx       ;And wait while 'ir' is high
00A5   0AA4           00401     GOTO $-1
00A6   0201           00402     MOVF TMR0, W         ;Copy the TMR0 value into the W register
00A7   0030           00403     MOVWF _count         ;and save the value into the 'count' register
00A8   0C0D           00404     MOVLW d'13'          ;Load 15 into W (256 us x 13 = 3.3 ms)
00A9   0090           00405     SUBWF _count, W      ;And subtract W from 'count'
00AA   0703           00406     BTFSS STATUS, C      ;If 'count' < 13 (pulse is shorter than 3.3 ms)
00AB   0A94           00407     GOTO _LOOP           ;then return to 'LOOP'
00AC   0C14           00408     MOVLW d'20'          ;Load 20 into W (256 us x 20 = 5.1 ms)
00AD   0090           00409     SUBWF _count, W      ;And subtract W from 'count'
00AE   0603           00410     BTFSC STATUS, C      ;If 'count' > 20 (pulse is longer than 5.1 ms)
00AF   0A94           00411     GOTO _LOOP           ;then return to 'LOOP'
                      00412 ;---------------Receive the command bytes-----------------------------
00B0   0071           00413     CLRF _byte_count     ;Clear the 'byte_count' register    
00B1   0C13           00414     MOVLW _ir_data       ;Load the address of the 'ir_data' into W
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE  9
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B2   0024           00415     MOVWF FSR            ;and save it to the indirect pointer register
00B3                  00416 _RECEIVE_BYTE:
00B3   0072           00417     CLRF _bit_count      ;Clear the 'bit_count' register
00B4   0060           00418     CLRF INDF            ;Clear the indirectly addressed register
00B5                  00419 _RECEIVE_BIT:
00B5   0320           00420     RRF INDF, F          ;Shift the INDF register to the right
                      00421 ;---------------Receive the positive pulse of the bit-----------------
00B6   0061           00422     CLRF TMR0           ;Otherwise clear the timer register
00B7   0766           00423     BTFSS GPIO, IRx      ;And wait while 'ir' is low
00B8   0AB7           00424     GOTO $-1
00B9   0201           00425     MOVF TMR0, W        ;Copy the TMR0 value into the W register
00BA   0030           00426     MOVWF _count         ;and save the value into the 'count' register
00BB   0C01           00427     MOVLW 1             ;Load 1 into W (256 us x 1 = 0.26 ms)
00BC   0090           00428     SUBWF _count, W      ;And subtract W from 'count'
00BD   0703           00429     BTFSS STATUS, C     ;If 'count' < 1 (pulse is shorter than 0.26 ms)
00BE   0A94           00430     GOTO _LOOP           ;then return to 'LOOP'
00BF   0C03           00431     MOVLW 3             ;Load 3 into W (256 us x 3 = 0.77 ms)
00C0   0090           00432     SUBWF _count, W      ;And subtract W from 'count'
00C1   0603           00433     BTFSC STATUS, C     ;If 'count' > 3 (pulse is longer than 0.77 ms)
00C2   0A94           00434     GOTO _LOOP           ;then return to 'LOOP'
                      00435 ;---------------Receive the negative pulse of the bit-----------------
00C3   0061           00436     CLRF TMR0           ;Otherwise clear the timer register
00C4   0666           00437     BTFSC GPIO, IRx     ;And wait while 'ir' is high
00C5   0AC4           00438     GOTO $-1
00C6   0201           00439     MOVF TMR0, W        ;Copy the TMR0 value into the W register
00C7   0030           00440     MOVWF _count        ;and save the value into the 'count' register
00C8   0C04           00441     MOVLW 4;///////////             ;Load 5 into W (256 us x 4 = 1.1 ms)
00C9   0090           00442     SUBWF _count, W      ;And subtract W from 'count'
00CA   0703           00443     BTFSS STATUS, C     ;If 'count' < 4 (pulse is shorter than 1.1 ms)
00CB   0AD1           00444     GOTO _NEXT_BIT       ;then go to the 'NEXT_BIT' label
00CC   0C08           00445     MOVLW 8             ;Load 8 into W (256 us x 8 = 2 ms)
00CD   0090           00446     SUBWF _count, W      ;And subtract W from 'count'
00CE   0603           00447     BTFSC STATUS, C     ;If 'count' > 8 (pulse is longer than 2 ms)
00CF   0A94           00448     GOTO _LOOP           ;then go to the 'LOOP' label
00D0   05E0           00449     BSF INDF, 7         ;Set the MSB of the INDF register
00D1                  00450 _NEXT_BIT:
00D1   02B2           00451     INCF _bit_count, F   ;Increment the 'bit_count' register
00D2   0772           00452     BTFSS _bit_count, 3  ;Check if 'bit_count' becomes 8
00D3   0AB5           00453     GOTO _RECEIVE_BIT    ;If it's not, then return to 'RECEIVE_BIT' label
00D4   02B1           00454     INCF _byte_count, F  ;Increment the 'byte_count' register
00D5   0651           00455     BTFSC _byte_count, 2 ;Check if 'byte_count' becomes 4    
00D6   0AD9           00456     GOTO _CHECK_DATA     ;If it is then go to 'CHECK_DATA' label
00D7   02A4           00457     INCF FSR, F         ;Increment the indirect addressing pointer
00D8   0AB3           00458     GOTO _RECEIVE_BYTE   ;and go to 'RECEIVE_BYTE' label
                      00459 
00D9                  00460 _CHECK_DATA:
00D9   0254           00461     COMF _ir_data+1, W   ;Negate the second received byte
00DA   0193           00462     XORWF _ir_data, W    ;And implement the XOR between 1st and 2nd bytes
00DB   0743           00463     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00DC   0A94           00464     GOTO _LOOP           ;Then return to the 'LOOP' label
00DD   0256           00465     COMF _ir_data+3, W   ;Negate the fourth received byte
00DE   0195           00466     XORWF _ir_data+2, W  ;And implement the XOR between 3rd and 4th bytes
00DF   0743           00467     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE 10
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E0   0A94           00468     GOTO _LOOP           ;Then return to the 'LOOP' label
                      00469 
00E1   0C05           00470     MOVLW 0x05           ;Check the VOL- button (code 0x05)
00E2   0195           00471     XORWF _ir_data+2, W  ;If command is not 0x05
00E3   0743           00472     BTFSS STATUS, Z
00E4   0AE6           00473     GOTO $+2             ;then skip the next line
00E5   0A2D           00474         goto DECREASE_VOLUME
                      00475 
00E6   0C06           00476     MOVLW 0x06           ;Check the VOL+ button (code 0x06)
00E7   0195           00477     XORWF _ir_data+2, W  ;If command is not 0x06
00E8   0743           00478     BTFSS STATUS, Z
00E9   0AEB           00479     GOTO $+2             ;then skip the next line
00EA   0A29           00480         goto INCREASE_VOLUME
                      00481 
00EB   0C02           00482     MOVLW 0x02           ;Check the << CH- button (code 0x02)
00EC   0195           00483     XORWF _ir_data+2, W  ;If command is not 0x02
00ED   0743           00484     BTFSS STATUS, Z
00EE   0AF0           00485     GOTO $+2             ;then skip the next line
00EF   0A44           00486         goto SEEK_DOWN 
                      00487 
00F0   0C03           00488     MOVLW 0x03           ;Check the W button (code 0x03)
00F1   0195           00489     XORWF _ir_data+2, W  ;If command is not 0x03
00F2   0743           00490     BTFSS STATUS, Z
00F3   0AF5           00491     GOTO $+2    ;$+2   ;then skip the next three lines
00F4   0A3B           00492         goto CH_UP ;////////////////////////
                      00493 
00F5   0A94           00494     GOTO _LOOP           ;and go to the 'SET_OUTPUT' label
                      00495 
                      00496     END                   ;/* END of the Program */
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE 11
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CH_UP                             0000003B
DC                                00000001
DECREASE_VOLUME                   0000002D
DELAY                             0000008D
DELAY_LOOP                        0000008F
F                                 00000001
FSR                               00000004
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GP4                               00000004
GP5                               00000005
GPIO                              00000006
GPWUF                             00000007
I2C_ACK                           00000084
I2C_CHECK_ACK                     00000071
I2C_NACK                          00000089
I2C_READ_BIT                      0000007B
I2C_READ_BYTE                     00000078
I2C_SHIFT                         0000006D
I2C_START                         0000005D
I2C_STOP                          00000060
I2C_WRITE_0                       0000006C
I2C_WRITE_1                       0000006A
I2C_WRITE_BIT                     00000067
I2C_WRITE_BYTE                    00000064
INCREASE_VOLUME                   00000029
INDF                              00000000
INIT                              00000002
IRx                               00000003
LOOP                              00000029
MAXRAM                            0000001F
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OSCCAL                            00000005
PA0                               00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
RAM                               00000007
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE 12
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
SYMBOL TABLE
  LABEL                             VALUE 

RAM_                              00000017
SCL                               00000004
SCL_HIGH                          00000055
SCL_LOW                           00000059
SDA                               00000005
SDA_HIGH                          0000004D
SDA_LOW                           00000051
SEEK_DOWN                         00000044
SET_VOLUME                        00000030
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
TRISIO4                           00000004
TRISIO5                           00000005
W                                 00000000
Z                                 00000002
_CHECK_DATA                       000000D9
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_ExtRC_OSC                        00000FFF
_IDLOC0                           00000200
_IDLOC1                           00000201
_IDLOC2                           00000202
_IDLOC3                           00000203
_IntRC_OSC                        00000FFE
_LOOP                             00000094
_LP_OSC                           00000FFC
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_NEXT_BIT                         000000D1
_OSC_ExtRC                        00000FFF
_OSC_IntRC                        00000FFE
_OSC_LP                           00000FFC
_OSC_XT                           00000FFD
_RECEIVE_BIT                      000000B5
_RECEIVE_BYTE                     000000B3
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
_XT_OSC                           00000FFD
__12F508                          00000001
_bit_count                        00000012
_byte_count                       00000011
_count                            00000010
_ir_data                          00000013
ack                               0000000C
bit_count                         00000009
freq                              00000397
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-29-2025  12:43:38         PAGE 13
PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                               *
PIC10F200, PIC10F202, PIC12F508 & PIC12F509                        *
SYMBOL TABLE
  LABEL                             VALUE 

freqB                             00000229
freqH                             0000008A
freqL                             00000040
frequency_h                       0000000F
frequency_l                       0000000E
i                                 00000007
i2c_data                          0000000A
j                                 00000008
port                              0000000B
volume                            0000000D
volume_init                       00000083


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX----------
0200 : XXXX------------ ---------------- ---------------- ----------------
0FC0 : ---------------- ---------------- ---------------- ---------------X

All other memory blocks unused.

Program Memory Words Used:   246
Program Memory Words Free:   266


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

