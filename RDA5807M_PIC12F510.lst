MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;==========================================================================
                      00002 ; TITLE       PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                        =
                      00003 ; SUBTITLE    PIC10F200,10F202,10F204,10F206,PIC12F508,12F509 & 12F510    =
                      00004 ; CONTENTS:  I²C RDA5807M + IR REMOTE Control                             =
                      00005 ; EDITOR:    @mit41301                                                    =
                      00006 ; UPDATED:   15/08/2025                                                   =
                      00007 ;==========================================================================
                      00008  
                      00009  ifdef __10F200
                      00010  include "p10F200.inc"
                      00011  list    p=10F200
                      00012 RAM     SET  H'0010'
                      00013 MAXRAM  EQU  H'001F'
                      00014  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00015  __idlocs H'F200'
                      00016 SDA        EQU    GP2    ;SDA pin of the I2C
                      00017 SCL        EQU    GP1    ;SCL pin of the I2C
                      00018 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00019  endif
                      00020 ;==========================================================================
                      00021  ifdef __10F202
                      00022  include "p10F202.inc"
                      00023  list    p=10F202
                      00024 RAM     EQU  h'0008'
                      00025 MAXRAM  EQU  H'001F'
                      00026  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00027  __idlocs H'F202'
                      00028 SDA        EQU    GP2    ;SDA pin of the I2C
                      00029 SCL        EQU    GP1    ;SCL pin of the I2C
                      00030 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00031  endif
                      00032 ;==========================================================================
                      00033  ifdef __10F204
                      00034  include "p10F204.inc"
                      00035  list    p=10F204
                      00036 RAM     EQU  H'0010'
                      00037 MAXRAM  EQU  H'001F'
                      00038  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00039  __idlocs H'F204'
                      00040 SDA        EQU    GP2    ;SDA pin of the I2C
                      00041 SCL        EQU    GP1    ;SCL pin of the I2C
                      00042 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00043  endif
                      00044 ;==========================================================================
                      00045  ifdef __10F206
                      00046  include "p10F206.inc"
                      00047  list    p=10F206
                      00048 RAM     EQU  h'0008'
                      00049 MAXRAM  EQU  H'001F'
                      00050  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00051  __idlocs H'F206'
                      00052 SDA        EQU    GP2    ;SDA pin of the I2C
                      00053 SCL        EQU    GP1    ;SCL pin of the I2C
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00055  endif
                      00056 ;==========================================================================
                      00057  ifdef __10F220
                      00058  include "p10F220.inc"
                      00059  list    p=10F220
                      00060 RAM     EQU  H'0010'
                      00061 MAXRAM  EQU  H'001F'
                      00062  __CONFIG _IOSCFS_4MHZ & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00063  __idlocs H'F220'
                      00064 SDA        EQU    GP2    ;SDA pin of the I2C
                      00065 SCL        EQU    GP1    ;SCL pin of the I2C
                      00066 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00067  endif
                      00068 ;==========================================================================
                      00069  ifdef __10F222
                      00070  include "p10F222.inc"
                      00071  list    p=10F222
                      00072 RAM     EQU  h'0009'
                      00073 MAXRAM  EQU  H'001F'
                      00074  __CONFIG _IOSCFS_4MHZ & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00075  __idlocs H'F222'
                      00076 SDA        EQU    GP2    ;SDA pin of the I2C
                      00077 SCL        EQU    GP1    ;SCL pin of the I2C
                      00078 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00079  endif
                      00080 ;========================================================================== 
                      00081  ifdef __12F508
                      00082  include "p12F508.inc"
                      00083  list    p=12F508
                      00084 RAM     EQU  h'0007'
                      00085 MAXRAM  EQU  H'001F'
                      00086  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00087  __idlocs H'F508'
                      00088 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00089 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00090 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00091  endif
                      00092 ;==========================================================================
                      00093  ifdef   __12F509
                      00094  include "p12F509.inc"
                      00095  list    p=12F509
                      00096 RAM     EQU  H'0007'
                      00097 MAXRAM  EQU  H'003F'
                      00098  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00099  __idlocs H'F509'
                      00100 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00101 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00102 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00103  endif
                      00104 ;==========================================================================
                      00105  ifdef   __12F510
                      00106  include "p12F510.inc"
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC12F510 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00189         LIST
                      00107  list    p=12F510
  0000000A            00108 RAM     EQU  H'000A'
  0000003F            00109 MAXRAM  EQU  H'003F'
0FFF   0FCA           00110  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF & _IOSCFS_OFF
0400   000F 0005 0001 00111  __idlocs H'F510'
       0000 
  00000003            00112 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
  00000004            00113 SCL        EQU    GP4    ;SCL pin of the I²C Bus
  00000005            00114 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00115  endif
                      00116 
                      00117  errorlevel +202,+205,+207,+302,+305,+306,+224
                      00118 ;********************************************************************
                      00119                 CBLOCK RAM      
                      00120 ;********************************************************************
  0000000A            00121 i           ;EQU    010h    ;Delay variable
  0000000B            00122 j           ;EQU    011h    ;Delay variable
  0000000C            00123 bit_count   ;EQU    012h    ;Counter of processed bits in I2C
  0000000D            00124 i2c_data    ;EQU    013h    ;Data to receive/transmit via I2C
  0000000E            00125 port        ;EQU    014h    ;Helper register to implement I2C
  0000000F            00126 ack         ;EQU    015h    ;Acknowledgment received from the device
  00000010            00127 volume      ;EQU    016h    ;Radio volume level
  00000011            00128 frequency_l ;EQU    017h    ;Frequency low byte
  00000012            00129 frequency_h ;EQU    018h    ;Frequency high byte
                      00130 
  00000013            00131 _count      ;EQU    019h    ;Saved value of the timer
  00000014            00132 _byte_count ;EQU    01Ah    ;Counter of processed bytes
  00000015            00133 _bit_count  ;EQU    01Bh    ;Counter of processed bits
  00000016            00134 _ir_data:4  ;EQU    01Ch    ;First IR byte
                      00135 ;********************************************************************
  0000001A            00136 RAM_            
                      00137                 ENDC
                      00138  if (RAM_-1) > MAXRAM
                      00139     error "File register usage OVERFLOW"
                      00140  endif
                      00141 ;###############################################################################
                      00142 ; DEFAULT STARTING FREQUENCY and VOLUME - Enter your own Frequency
                      00143 ;###############################################################################
  00000083            00144 volume_init EQU 0x03 | 1<<7 ;0x80; Initial Volume = 3 // [0..15]
  00000397            00145 freq  EQU d'919'        ;   91.9 MHz
                      00146 ;freq  EQU d'943'       ;   94.3 MHz
                      00147 ;freq  EQU d'1040'      ;  104.0 MHz
  00000031            00148 freqB EQU (freq - 366) ; BAND = 0 : 87~108 MHz (US/Europe)
  0000000C            00149 freqH EQU (freqB >> 2)    ; Frequency = Channel Spacing(kHz) x CHAN + 87.0 MHz
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000040            00150 freqL EQU ((freqB&3) << 6); ; Shift channel selection for matching register 0x03
                      00151 
0000                  00152         ORG    H'0000'
0000   0EFE           00153     andlw   ~1 
0001   0025           00154     movwf   OSCCAL
                      00155  ifdef __10F204
                      00156     movlw  B'00000000'   ;Use as Digital I/O 
                      00157     movwf  CMCON0                ;Disable Digital Comparator function
                      00158  endif
                      00159 
                      00160  ifdef __10F206
                      00161     movlw  B'00000000'   ;Use as Digital I/O 
                      00162     movwf  CMCON0                ;Disable Digital Comparator function
                      00163  endif
                      00164  ifdef __10F220
                      00165     movlw  B'00000000'   ;Use as Digital I/O 
                      00166     movwf  ADCON0                ;Disable Digital Comparator function
                      00167  endif
                      00168  ifdef __10F222
                      00169     movlw  B'00000000'   ;Use as Digital I/O 
                      00170     movwf  ADCON0                ;Disable Digital Comparator function
                      00171  endif
                      00172  ifdef __12F510
0002   0C00           00173     movlw  B'00000000'   ;Use as Digital I/O 
0003   0027           00174     movwf  CM1CON0               ;Disable Digital Comparator function
0004   0C00           00175     movlw  B'00000000'   ;Use as Digital I/O 
0005   0028           00176     movwf  ADCON0                ;Disable ADC function
                      00177  endif
0006                  00178 INIT:
0006   0C97           00179     MOVLW  ~((1<<T0CS)|(1<<NOT_GPPU)|(1<<PSA))
0007   0002           00180     OPTION                ;Enable GPIO2 and pull-ups
0008   0C3F           00181     MOVLW  0x3F           ;Save 0x3F into 'port' register [0x0F] for 10F20X dev
0009   002E           00182     MOVWF  port           ;It's used to switch SDA/SCL pins direction
000A   0006           00183     TRIS   GPIO           ;Set all pins as inputs
                      00184 ;###############################################################################
000B   0CFF           00185     MOVLW  0xFF           ;Perform 200 ms delay
000C   0991           00186     CALL   DELAY          ;to let the power stabilize
000D   0CFF           00187     MOVLW  0xFF           ;Perform 400 ms delay
000E   0991           00188     CALL   DELAY          ;to let the power stabilize
000F   0CFF           00189     MOVLW  0xFF           ;Perform 600 ms delay
0010   0991           00190     CALL   DELAY          ;to let the power stabilize
0011   0CFF           00191     MOVLW  0xFF           ;Perform 800 ms delay
0012   0991           00192     CALL   DELAY          ;to let the power stabilize
                      00193 ;###############################################################################
0013   0066           00194     CLRF   GPIO           ;Clear GPIO to set all pins to 0
0014   0C83           00195     movlw volume_init     ;0x83 ////////////
0015   0C10           00196     movlw volume
0016   0C40           00197     movlw freqL           ;91.90 MHz
0017   0031           00198     movwf frequency_l
0018   0C0C           00199     movlw freqH           ;91.90 MHz
0019   0032           00200     movwf frequency_h
001A   0CC0           00201     MOVLW  0xC0           ;Implement AND operation between 0xC0
001B   0171           00202     ANDWF  frequency_l, F ;and 'frequency_l' to clear its last 6 bits
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C   0591           00203     BSF    frequency_l, 4 ;Set bit 4 (Tune) to adjust the frequency
                      00204 ;START_RADIO:              ;Start FM radio
001D   0961           00205     CALL   I2C_START      ;Issue I2C Start condition
001E   0C20           00206     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
001F   0968           00207     CALL   I2C_WRITE_BYTE ;Write the radio address via i2C
0020   0CC0           00208     MOVLW  0xC0           ;Write high byte into radio register 0x02
                      00209 ;   MOVLW  0xD0           ;TEST added to enable BASS 
0021   0968           00210     CALL   I2C_WRITE_BYTE
0022   0C01           00211     MOVLW  0x01           ;Write  low byte into radio register 0x02
0023   0968           00212     CALL   I2C_WRITE_BYTE
0024   0212           00213     MOVF   frequency_h, W ;Write high byte into radio register 0x03
0025   0968           00214     CALL   I2C_WRITE_BYTE
0026   0211           00215     MOVF   frequency_l, W ;Write  low byte into radio register 0x03
0027   0968           00216     CALL   I2C_WRITE_BYTE
0028   0964           00217     CALL   I2C_STOP       ;Issue I2C Stop condition
0029   0C0F           00218     MOVLW  0x0F           ;Implement AND operation between 0xC0
002A   0170           00219     ANDWF  volume, F      ;and 'volume' to clear its higher 4 bits
002B   05F0           00220     BSF    volume, 7      ;Set bit 7  to select correct LNA input
002C   0A34           00221     GOTO   SET_VOLUME     ;And go to the 'SET_VOLUME' label
002D                  00222 LOOP:                     
                      00223 ;BUTTONS_LOOP:             ;Loop while button is pressed
002D                  00224 INCREASE_VOLUME:          ;Otherwise start 'INCREASE_VOLUME'
002D   02B0           00225     INCF   volume, F      ;Increment the 'volume' register
002E   0690           00226     BTFSC  volume, 4      ;If bit 4 becomes set (volume = 0b10010000)
002F   00F0           00227     DECF   volume, F      ;then decrement the 'volume' to get 0b10001111
0030   0A34           00228     GOTO   SET_VOLUME     ;and go to the 'SET_VOLUME' label
0031                  00229 DECREASE_VOLUME:          ;Decrease the volume here
0031   00F0           00230     DECF   volume, F      ;Decrement the 'volume' register
0032   07F0           00231     BTFSS  volume, 7      ;If bit 7 becomes 0 (volume = 0b01111111)
0033   02B0           00232     INCF   volume, F      ;then increment the 'volume' to get 0b10000000
0034                  00233 SET_VOLUME:               ;Set the radio volume
0034   0961           00234     CALL   I2C_START      ;Issue I2C start condition
0035   0C22           00235     MOVLW  0x22           ;Radio chip address for random writing is 0x22
0036   0968           00236     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
0037   0C05           00237     MOVLW  0x05           ;Set the register number to write to (0x05)
0038   0968           00238     CALL   I2C_WRITE_BYTE ;And write it via I2C
0039   0C88           00239     MOVLW  0x88           ;Set the high byte of 0x05 register (default value)
003A   0968           00240     CALL   I2C_WRITE_BYTE ;And write it via i2C
003B   0210           00241     MOVF   volume, W      ;Set the 'volume' as low byte of 0x05 register
003C   0968           00242     CALL   I2C_WRITE_BYTE ;And write it via I2C
003D   0964           00243     CALL   I2C_STOP       ;Issue Stop condition
003E   0A98           00244     GOTO   _LOOP           ;And return to the 'LOOP' label
                      00245 ;CHANNEL_SEEK:             ;Here button is released and we check what to do
003F                  00246 CH_UP:
003F   0961           00247     CALL   I2C_START      ;Issue I2C Start condition
0040   0C20           00248     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
0041   0968           00249     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
0042   0CC3           00250     MOVLW  0xC3           ;Otherwise set 0xC3 as high byte of 0x02 register
0043   0968           00251     CALL   I2C_WRITE_BYTE ;And write it via I2C
0044   0C01           00252     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
0045   0968           00253     CALL   I2C_WRITE_BYTE ;And write it via I2C
0046   0964           00254     CALL   I2C_STOP       ;Issue I2C Stop condition
0047   0A98           00255     GOTO   _LOOP           ;And return to the 'LOOP' labe;
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0048                  00256 SEEK_DOWN:                ;Seek the station down
0048   0961           00257     CALL   I2C_START      ;ADDEDIssue I2C Start condition
0049   0C20           00258     MOVLW  0x20           ;ADDEDRadio chip address for sequential writing is 0x20
004A   0968           00259     CALL   I2C_WRITE_BYTE ;ADDEDWrite the radio address via I2C
004B   0CC1           00260     MOVLW  0xC1           ;Set 0xC1 as high byte of 0x02 register
004C   0968           00261     CALL   I2C_WRITE_BYTE ;Ending of previous transaction
004D   0C01           00262     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
004E   0968           00263     CALL   I2C_WRITE_BYTE ;And write it via I2C
004F   0964           00264     CALL   I2C_STOP       ;Issue I2C Stop condition
0050   0A98           00265     GOTO   _LOOP           ;And return to the 'LOOP' labe;
                      00266 ;-------------Helper subroutines---------------
0051                  00267 SDA_HIGH:                 ;Set SDA pin high
0051   05AE           00268     BSF    port, SDA      ;Set 'sda' bit in the 'port' to make it input
0052   020E           00269     MOVF   port, W        ;Copy 'port' into W register
0053   0006           00270     TRIS   GPIO           ;And set it as TRISGPIO value
0054   0800           00271     RETLW  0
0055                  00272 SDA_LOW:                  ;Set SDA pin low
0055   04AE           00273     BCF    port, SDA      ;Reset 'sda' bit in the 'port' to make it output
0056   020E           00274     MOVF   port, W        ;Copy 'port' into W register
0057   0006           00275     TRIS   GPIO           ;And set it as TRISGPIO value
0058   0800           00276     RETLW  0
0059                  00277 SCL_HIGH:                 ;Set SCL pin high
0059   058E           00278     BSF    port, SCL      ;Set 'scl' bit in the 'port' to make it input
005A   020E           00279     MOVF   port, W        ;Copy 'port' into W register
005B   0006           00280     TRIS   GPIO           ;And set it as TRISGPIO value
005C   0800           00281     RETLW  0
005D                  00282 SCL_LOW:                  ;Set SCL pin low
005D   048E           00283     BCF    port, SCL      ;Reset 'scl' bit in the 'port' to make it output
005E   020E           00284     MOVF   port, W        ;Copy 'port' into W register
005F   0006           00285     TRIS   GPIO           ;And set it as TRISGPIO value
0060   0800           00286     RETLW  0
                      00287 ;-------------I2C start condition--------------
0061                  00288 I2C_START:
0061   0959           00289     CALL   SCL_HIGH       ;Set SCL high
0062   0955           00290     CALL   SDA_LOW        ;Then set SDA low
0063   0800           00291     RETLW  0
                      00292 ;-------------I2C stop condition---------------
0064                  00293 I2C_STOP:
0064   0955           00294     CALL   SDA_LOW        ;Set SDA low
0065   0959           00295     CALL   SCL_HIGH       ;Set SCL high
0066   0951           00296     CALL   SDA_HIGH       ;Then set SDA highs and release the bus
0067   0800           00297     RETLW  0
                      00298 ;------------I2C write byte--------------------
0068                  00299 I2C_WRITE_BYTE:
0068   002D           00300     MOVWF  i2c_data       ;Load 'i2c_data' from W register
0069   0C08           00301     MOVLW  8              ;Load value 8 into 'bit_count'
006A   002C           00302     MOVWF  bit_count      ;to indicate we're going to send 8 bits
006B                  00303 I2C_WRITE_BIT:            ;Write single bit to I2C
006B   095D           00304     CALL   SCL_LOW        ;Set SCL low, now we can change SDA
006C   07ED           00305     BTFSS  i2c_data, 7    ;Check the MSB of 'i2c_data'
006D   0A70           00306     GOTO   I2C_WRITE_0    ;If it's 0 then go to the 'I2C_WRITE_0' label
006E                  00307 I2C_WRITE_1:              ;Else continue with 'I2C_WRITE_1'
006E   0951           00308     CALL   SDA_HIGH       ;Set SDA high
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

006F   0A71           00309     GOTO   I2C_SHIFT      ;And go to the 'I2C_SHIFT' label
0070                  00310 I2C_WRITE_0:
0070   0955           00311     CALL   SDA_LOW        ;Set SDA low
0071                  00312 I2C_SHIFT:
0071   0959           00313     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
0072   036D           00314     RLF    i2c_data, F     ;Shift 'i2c_data' one bit to the left
0073   02EC           00315     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0074   0A6B           00316     GOTO   I2C_WRITE_BIT  ;If not then return to the 'I2C_WRITE_BIT'
0075                  00317 I2C_CHECK_ACK:            ;Else check the acknowledgement bit
0075   095D           00318     CALL   SCL_LOW        ;Set I2C low to end the last pulse
0076   0951           00319     CALL   SDA_HIGH       ;Set SDA high to release the bus
0077   0959           00320     CALL   SCL_HIGH       ;Set I2C high to start the new pulse
0078   0206           00321     MOVF   GPIO, W        ;Copy the GPIO register value into the 'ack'
0079   002F           00322     MOVWF  ack            ;Now bit 'sda' of the 'ack' will contain ACK bit
007A   095D           00323     CALL   SCL_LOW        ;Set SCL low to end the acknowledgement bit
007B   0800           00324     RETLW  0
                      00325 ;------------I2C read byte----------------------
007C                  00326 I2C_READ_BYTE:
007C   0C08           00327     MOVLW  8              ;Load value 8 into 'bit_count'
007D   002C           00328     MOVWF  bit_count      ;to indicate we're going to receive 8 bits
007E   006D           00329     CLRF   i2c_data       ;Clear the 'i2c_data' register
007F                  00330 I2C_READ_BIT:             ;Read single bit from the I2C
007F   036D           00331     RLF    i2c_data, F    ;Shift the 'i2c_data' register one bit to the left
0080   095D           00332     CALL   SCL_LOW        ;Set SCL low to prepare for the new bit
0081   0959           00333     CALL   SCL_HIGH       ;Set SCL high to read the bit value
0082   06A6           00334     BTFSC  GPIO, SDA      ;Check the 'sda' bit in the GPIO register
0083   050D           00335     BSF    i2c_data, 0    ;if it's 1 then set the LSB of the 'i2c_data'
0084   02EC           00336     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0085   0A7F           00337     GOTO   I2C_READ_BIT   ;If not, then return to the 'I2C_READ_BIT'
0086   095D           00338     CALL   SCL_LOW        ;Set SCL low to end the last pulse
0087   0800           00339     RETLW  0              ;Otherwise return from the subroutine
                      00340 ;------------I2C send ACK-----------------------
0088                  00341 I2C_ACK:
0088   0955           00342     CALL   SDA_LOW        ;Set SDA low to issue ACK condition
0089   0959           00343     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
008A   095D           00344     CALL   SCL_LOW        ;Set SCL low to end the pulse
008B   0951           00345     CALL   SDA_HIGH       ;Set SDA high to release the bus
008C   0800           00346     RETLW  0
                      00347 ;------------I2C send NACK----------------------
008D                  00348 I2C_NACK:
008D   0951           00349     CALL   SDA_HIGH       ;Set SDA low to issue NACK condition
008E   0959           00350     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
008F   095D           00351     CALL   SCL_LOW        ;Set SCL low to end the pulse
0090   0800           00352     RETLW  0
                      00353 ;-------------Delay subroutine------------------
0091                  00354 DELAY:                    ;Start DELAY subroutine here  
0091   002A           00355     MOVWF  i              ;Copy the value to the register i
0092   002B           00356     MOVWF  j              ;Copy the value to the register j
0093                  00357 DELAY_LOOP:               ;Start delay loop
0093   02EA           00358     DECFSZ i, F           ;Decrement i and check if it is not zero
0094   0A93           00359     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0095   02EB           00360     DECFSZ j, F           ;Decrement j and check if it is not zero
0096   0A93           00361     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0097   0800           00362     RETLW  0              ;Else return from the subroutine
                      00363 ;##############################################################################
                      00364 ;---IR REMOTE CONTROL 38kHz ROUTINE----------------/[NEC]\---------------------
                      00365 ;##############################################################################
0098                  00366 _LOOP:                    ;Main loop of the program
                      00367 ;---------------Wait for the preamble positive pulse---------------------
0098   0666           00368     BTFSC GPIO, IRx       ;Wait while 'ir' pin goes down
0099   0A98           00369     GOTO _LOOP           ;If it's high then return to 'LOOP'
009A   0061           00370     CLRF  TMR0           ;Otherwise clear the timer register
009B   0766           00371     BTFSS GPIO, IRx       ;And wait while 'ir' is low
009C   0A9B           00372     GOTO  $-1
009D   0201           00373     MOVF  TMR0, W        ;Copy the TMR0 value into the W register
009E   0033           00374     MOVWF _count         ;and save the value into the 'count' register
009F   0C1E           00375     MOVLW d'30'          ;Load 30 into W (256 us x 32 = 7.7 ms)
00A0   0093           00376     SUBWF _count, W      ;And subtract W from 'count'
00A1   0703           00377     BTFSS STATUS, C      ;If 'count' < 30 (pulse is shorter than 7.7 ms)
00A2   0A98           00378     GOTO  _LOOP          ;then return to 'LOOP'
00A3   0C2D           00379     MOVLW d'45'          ;Load 45 into W (256 us x 45 = 11.5 ms)
00A4   0093           00380     SUBWF _count, W      ;And subtract W from 'count'
00A5   0603           00381     BTFSC STATUS, C      ;If 'count' > 45 (pulse is longer than 8 ms)
00A6   0A98           00382     GOTO _LOOP           ;then return to 'LOOP'
                      00383 ;---------------Check the preamble negative pulse---------------------
00A7   0061           00384     CLRF TMR0            ;Otherwise clear the timer register
00A8   0666           00385     BTFSC GPIO, IRx       ;And wait while 'ir' is high
00A9   0AA8           00386     GOTO $-1
00AA   0201           00387     MOVF TMR0, W         ;Copy the TMR0 value into the W register
00AB   0033           00388     MOVWF _count         ;and save the value into the 'count' register
00AC   0C0D           00389     MOVLW d'13'          ;Load 15 into W (256 us x 13 = 3.3 ms)
00AD   0093           00390     SUBWF _count, W      ;And subtract W from 'count'
00AE   0703           00391     BTFSS STATUS, C      ;If 'count' < 13 (pulse is shorter than 3.3 ms)
00AF   0A98           00392     GOTO _LOOP           ;then return to 'LOOP'
00B0   0C14           00393     MOVLW d'20'          ;Load 20 into W (256 us x 20 = 5.1 ms)
00B1   0093           00394     SUBWF _count, W      ;And subtract W from 'count'
00B2   0603           00395     BTFSC STATUS, C      ;If 'count' > 20 (pulse is longer than 5.1 ms)
00B3   0A98           00396     GOTO _LOOP           ;then return to 'LOOP'
                      00397 ;---------------Receive the command bytes-----------------------------
00B4   0074           00398     CLRF _byte_count     ;Clear the 'byte_count' register    
00B5   0C16           00399     MOVLW _ir_data       ;Load the address of the 'ir_data' into W
00B6   0024           00400     MOVWF FSR            ;and save it to the indirect pointer register
00B7                  00401 _RECEIVE_BYTE:
00B7   0075           00402     CLRF _bit_count      ;Clear the 'bit_count' register
00B8   0060           00403     CLRF INDF            ;Clear the indirectly addressed register
00B9                  00404 _RECEIVE_BIT:
00B9   0320           00405     RRF INDF, F          ;Shift the INDF register to the right
                      00406 ;---------------Receive the positive pulse of the bit-----------------
00BA   0061           00407     CLRF TMR0            ;Otherwise clear the timer register
00BB   0766           00408     BTFSS GPIO, IRx      ;And wait while 'ir' is low
00BC   0ABB           00409     GOTO $-1
00BD   0201           00410     MOVF TMR0, W         ;Copy the TMR0 value into the W register
00BE   0033           00411     MOVWF _count         ;and save the value into the 'count' register
00BF   0C01           00412     MOVLW 1              ;Load 1 into W (256 us x 1 = 0.26 ms)
00C0   0093           00413     SUBWF _count, W      ;And subtract W from 'count'
00C1   0703           00414     BTFSS STATUS, C      ;If 'count' < 1 (pulse is shorter than 0.26 ms)
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C2   0A98           00415     GOTO _LOOP           ;then return to 'LOOP'
00C3   0C03           00416     MOVLW 3              ;Load 3 into W (256 us x 3 = 0.77 ms)
00C4   0093           00417     SUBWF _count, W      ;And subtract W from 'count'
00C5   0603           00418     BTFSC STATUS, C      ;If 'count' > 3 (pulse is longer than 0.77 ms)
00C6   0A98           00419     GOTO _LOOP           ;then return to 'LOOP'
                      00420 ;---------------Receive the negative pulse of the bit-----------------
00C7   0061           00421     CLRF TMR0            ;Otherwise clear the timer register
00C8   0666           00422     BTFSC GPIO, IRx      ;And wait while 'ir' is high
00C9   0AC8           00423     GOTO $-1
00CA   0201           00424     MOVF TMR0, W         ;Copy the TMR0 value into the W register
00CB   0033           00425     MOVWF _count         ;and save the value into the 'count' register
00CC   0C04           00426     MOVLW 4              ;Load 5 into W (256 us x 4 = 1.1 ms)
00CD   0093           00427     SUBWF _count, W      ;And subtract W from 'count'
00CE   0703           00428     BTFSS STATUS, C      ;If 'count' < 4 (pulse is shorter than 1.1 ms)
00CF   0AD5           00429     GOTO _NEXT_BIT       ;then go to the 'NEXT_BIT' label
00D0   0C08           00430     MOVLW 8              ;Load 8 into W (256 us x 8 = 2 ms)
00D1   0093           00431     SUBWF _count, W      ;And subtract W from 'count'
00D2   0603           00432     BTFSC STATUS, C      ;If 'count' > 8 (pulse is longer than 2 ms)
00D3   0A98           00433     GOTO _LOOP           ;then go to the 'LOOP' label
00D4   05E0           00434     BSF INDF, 7          ;Set the MSB of the INDF register
00D5                  00435 _NEXT_BIT:
00D5   02B5           00436     INCF _bit_count, F   ;Increment the 'bit_count' register
00D6   0775           00437     BTFSS _bit_count, 3  ;Check if 'bit_count' becomes 8
00D7   0AB9           00438     GOTO _RECEIVE_BIT    ;If it's not, then return to 'RECEIVE_BIT' label
00D8   02B4           00439     INCF _byte_count, F  ;Increment the 'byte_count' register
00D9   0654           00440     BTFSC _byte_count, 2 ;Check if 'byte_count' becomes 4    
00DA   0ADD           00441     GOTO _CHECK_DATA     ;If it is then go to 'CHECK_DATA' label
00DB   02A4           00442     INCF FSR, F          ;Increment the indirect addressing pointer
00DC   0AB7           00443     GOTO _RECEIVE_BYTE   ;and go to 'RECEIVE_BYTE' label
00DD                  00444 _CHECK_DATA:
00DD   0257           00445     COMF _ir_data+1, W   ;Negate the second received byte
00DE   0196           00446     XORWF _ir_data, W    ;And implement the XOR between 1st and 2nd bytes
00DF   0743           00447     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00E0   0A98           00448     GOTO _LOOP           ;Then return to the 'LOOP' label
00E1   0259           00449     COMF _ir_data+3, W   ;Negate the fourth received byte
00E2   0198           00450     XORWF _ir_data+2, W  ;And implement the XOR between 3rd and 4th bytes
00E3   0743           00451     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00E4   0A98           00452     GOTO _LOOP           ;Then return to the 'LOOP' label
00E5   0C05           00453     MOVLW 0x05           ;Check the VOL- button (code 0x05)
00E6   0198           00454     XORWF _ir_data+2, W  ;If command is not 0x05
00E7   0743           00455     BTFSS STATUS, Z
00E8   0AEA           00456     GOTO $+2             ;then skip the next line
00E9   0A31           00457     goto DECREASE_VOLUME
00EA   0C06           00458     MOVLW 0x06           ;Check the VOL+ button (code 0x06)
00EB   0198           00459     XORWF _ir_data+2, W  ;If command is not 0x06
00EC   0743           00460     BTFSS STATUS, Z
00ED   0AEF           00461     GOTO $+2             ;then skip the next line
00EE   0A2D           00462     goto INCREASE_VOLUME
00EF   0C02           00463     MOVLW 0x02           ;Check the << CH- button (code 0x02)
00F0   0198           00464     XORWF _ir_data+2, W  ;If command is not 0x02
00F1   0743           00465     BTFSS STATUS, Z
00F2   0AF4           00466     GOTO $+2             ;then skip the next line
00F3   0A48           00467     goto SEEK_DOWN 
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00F4   0C03           00468     MOVLW 0x03           ;Check the W button (code 0x03)
00F5   0198           00469     XORWF _ir_data+2, W  ;If command is not 0x03
00F6   0743           00470     BTFSS STATUS, Z
00F7   0AF9           00471     GOTO $+2    ;$+2     ;then skip the next three lines
00F8   0A3F           00472     goto CH_UP           ;goto Channel Up
00F9   0A98           00473     GOTO _LOOP           ;and go to the 'SET_OUTPUT' label
                      00474     END                  ;/* END of the Program */
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE 11


SYMBOL TABLE
  LABEL                             VALUE 

ADCON0                            00000008
ADCS0                             00000004
ADCS1                             00000005
ADON                              00000000
ADRES                             00000009
ANS0                              00000006
ANS1                              00000007
C                                 00000000
C1NREF                            00000002
C1ON                              00000003
C1OUT                             00000007
C1POL                             00000005
C1PREF                            00000001
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CHS0                              00000002
CHS1                              00000003
CH_UP                             0000003F
CM1CON0                           00000007
CWUF                              00000006
DC                                00000001
DECREASE_VOLUME                   00000031
DELAY                             00000091
DELAY_LOOP                        00000093
F                                 00000001
FSR                               00000004
GO                                00000001
GO_NOT_DONE                       00000001
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GP4                               00000004
GP5                               00000005
GPIO                              00000006
GPWUF                             00000007
I2C_ACK                           00000088
I2C_CHECK_ACK                     00000075
I2C_NACK                          0000008D
I2C_READ_BIT                      0000007F
I2C_READ_BYTE                     0000007C
I2C_SHIFT                         00000071
I2C_START                         00000061
I2C_STOP                          00000064
I2C_WRITE_0                       00000070
I2C_WRITE_1                       0000006E
I2C_WRITE_BIT                     0000006B
I2C_WRITE_BYTE                    00000068
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

INCREASE_VOLUME                   0000002D
INDF                              00000000
INIT                              00000006
IRx                               00000003
LOOP                              0000002D
MAXRAM                            0000003F
NOT_C1OUTEN                       00000006
NOT_C1T0CS                        00000004
NOT_C1WU                          00000000
NOT_DONE                          00000001
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OSCCAL                            00000005
PA0                               00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
RAM                               0000000A
RAM_                              0000001A
SCL                               00000004
SCL_HIGH                          00000059
SCL_LOW                           0000005D
SDA                               00000005
SDA_HIGH                          00000051
SDA_LOW                           00000055
SEEK_DOWN                         00000048
SET_VOLUME                        00000034
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
TRISIO4                           00000004
TRISIO5                           00000005
W                                 00000000
Z                                 00000002
_CHECK_DATA                       000000DD
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_ExtRC_OSC                        00000FFF
_IDLOC0                           00000400
_IDLOC1                           00000401
_IDLOC2                           00000402
_IDLOC3                           00000403
_IOSCFS_OFF                       00000FDF
MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

_IOSCFS_ON                        00000FFF
_IntRC_OSC                        00000FFE
_LOOP                             00000098
_LP_OSC                           00000FFC
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_NEXT_BIT                         000000D5
_OSC_ExtRC                        00000FFF
_OSC_IntRC                        00000FFE
_OSC_LP                           00000FFC
_OSC_XT                           00000FFD
_RECEIVE_BIT                      000000B9
_RECEIVE_BYTE                     000000B7
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
_XT_OSC                           00000FFD
__12F510                          00000001
_bit_count                        00000015
_byte_count                       00000014
_count                            00000013
_ir_data                          00000016
ack                               0000000F
bit_count                         0000000C
freq                              00000397
freqB                             00000031
freqH                             0000000C
freqL                             00000040
frequency_h                       00000012
frequency_l                       00000011
i                                 0000000A
i2c_data                          0000000D
j                                 0000000B
port                              0000000E
volume                            00000010
volume_init                       00000083


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXX------
0400 : XXXX------------ ---------------- ---------------- ----------------
0FC0 : ---------------- ---------------- ---------------- ---------------X

All other memory blocks unused.

Program Memory Words Used:   250
Program Memory Words Free:   774

MPASM  5.51              PIC20X_PIC12F50X.ASM   9-3-2025  11:56:11         PAGE 14






Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

