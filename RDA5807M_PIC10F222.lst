MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ; TITLE       PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                             *
                      00003 ; SUBTITLE    PIC10F200,10F202,10F204,10F206,PIC12F508,12F509 & 12F510         *
                      00004 ; CONTENTS:  I²C RDA5807M + IR REMOTE Control                                  *
                      00005 ; EDITOR:    @mit41301                                                         *
                      00006 ; UPDATED:   15/08/2025                                                        *
                      00007 ;*******************************************************************************
                      00008  
0200   0005 0008 0000 00009  __idlocs H'5807'
       0007 
                      00010 
                      00011  ifdef __10F200
                      00012  include "p10F200.inc"
                      00013  ;list    p=10F200
                      00014  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00015  endif
                      00016  ifdef __10F202
                      00017  include "p10F202.inc"
                      00018  ;list    p=10F202
                      00019  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00020  endif
                      00021  ifdef __10F204
                      00022  include "p10F204.inc"
                      00023  ;list    p=10F204
                      00024  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00025  endif
                      00026  ifdef __10F206
                      00027  include "p10F206.inc"
                      00028  ;list    p=10F206
                      00029  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00030  endif
                      00031  ifdef __10F220
                      00032  include "p10F220.inc"
                      00033  ;list    p=10F220
                      00034  __CONFIG _IOSCFS_4MHZ & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00035  endif
                      00036  ifdef __10F222
                      00037  include "p10F222.inc"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC10F222 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00180         LIST
                      00038  ;list    p=10F222
0FFF   0FEA           00039  __CONFIG _IOSCFS_4MHZ & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00040  endif  
                      00041  ifdef __12F508
                      00042  include "p12F508.inc"
                      00043  ;list    p=12F508
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00045  endif
                      00046  ifdef __12F509
                      00047  include "p12F509.inc"
                      00048  ;list    p=12F509
                      00049  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00050  endif
                      00051  ifdef __12F510
                      00052  include "p12F510.inc"
                      00053  ;list    p=12F510
                      00054  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF & _IOSCFS_OFF
                      00055  endif
                      00056 
                      00057  errorlevel +205,+207,+302,+305,+306, +224
                      00058 
                      00059 ;*******************************************************************************
                      00060 ; File register usage                                                          *
                      00061 ;*******************************************************************************
                      00062     ifdef __10F200
                      00063 RAM     EQU  H'0010'
                      00064 MAXRAM  EQU  H'001F'
                      00065     endif
                      00066     ifdef __10F202
                      00067 RAM     EQU  h'0008'
                      00068 MAXRAM  EQU  H'001F'
                      00069     endif
                      00070     ifdef __10F204
                      00071 RAM     EQU  H'0010'
                      00072 MAXRAM  EQU  H'0020'
                      00073     endif
                      00074     ifdef __10F206
                      00075 RAM     EQU  h'0008'
                      00076 MAXRAM  EQU  H'001F'
                      00077     endif
                      00078     ifdef __10F220
                      00079 RAM     EQU  H'0010'
                      00080 MAXRAM  EQU  H'001F'
                      00081     endif
                      00082     ifdef __10F222
  00000009            00083 RAM     EQU  h'0009'
  0000001F            00084 MAXRAM  EQU  H'001F'
                      00085     endif
                      00086     ifdef __12F508
                      00087 RAM     EQU  h'0007'
                      00088 MAXRAM  EQU  H'001F'
                      00089     endif
                      00090     ifdef __12F509
                      00091 RAM     EQU  H'0007'
                      00092 MAXRAM  EQU  H'003F'
                      00093         endif
                      00094     ifdef __12F510
                      00095 RAM     EQU  H'000A'
                      00096 MAXRAM  EQU  H'003F'
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097     endif
                      00098 ;********************************************************************
                      00099                 CBLOCK RAM      
                      00100 ;********************************************************************
  00000009            00101 i           ;EQU    010h    ;Delay variable
  0000000A            00102 j           ;EQU    011h    ;Delay variable
  0000000B            00103 bit_count   ;EQU    012h    ;Counter of processed bits in I2C
  0000000C            00104 i2c_data    ;EQU    013h    ;Data to receive/transmit via I2C
  0000000D            00105 port        ;EQU    014h    ;Helper register to implement I2C
  0000000E            00106 ack         ;EQU    015h    ;Acknowledgment received from the device
  0000000F            00107 volume      ;EQU    016h    ;Radio volume level
  00000010            00108 frequency_l ;EQU    017h    ;Frequency low byte
  00000011            00109 frequency_h ;EQU    0018h    ;Frequency high byte
                      00110 ;********************************************************************
  00000012            00111 _count      ;EQU    019h    ;Saved value of the timer
  00000013            00112 _byte_count ;EQU    01Ah    ;Counter of processed bytes
  00000014            00113 _bit_count  ;EQU    01Bh    ;Counter of processed bits
  00000015            00114 _ir_data:4  ;EQU    01Ch    ;First IR byte
                      00115 ;********************************************************************
  00000019            00116 RAM_            
                      00117                 ENDC
                      00118 
                      00119     if (RAM_-1) > MAXRAM
                      00120         error "File register usage OVERFLOW"
                      00121     endif
                      00122 ;###############################################################################
                      00123      ifdef __10F200
                      00124 SDA        EQU    GP2    ;SDA pin of the I2C
                      00125 SCL        EQU    GP1    ;SCL pin of the I2C
                      00126 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00127      endif
                      00128      ifdef __10F202
                      00129 SDA        EQU    GP2    ;SDA pin of the I2C
                      00130 SCL        EQU    GP1    ;SCL pin of the I2C
                      00131 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00132      endif
                      00133      ifdef __10F204
                      00134 SDA        EQU    GP2    ;SDA pin of the I2C
                      00135 SCL        EQU    GP1    ;SCL pin of the I2C
                      00136 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00137      endif
                      00138      ifdef __10F206
                      00139 SDA        EQU    GP2    ;SDA pin of the I2C
                      00140 SCL        EQU    GP1    ;SCL pin of the I2C
                      00141 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00142      endif
                      00143      ifdef __10F220
                      00144 SDA        EQU    GP2    ;SDA pin of the I2C
                      00145 SCL        EQU    GP1    ;SCL pin of the I2C
                      00146 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00147      endif
                      00148      ifdef __10F222
  00000002            00149 SDA        EQU    GP2    ;SDA pin of the I2C
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            00150 SCL        EQU    GP1    ;SCL pin of the I2C
  00000003            00151 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00152      endif
                      00153      ifdef __12F508 
                      00154 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00155 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00156 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00157      endif
                      00158      ifdef __12F509 
                      00159 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00160 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00161 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00162      endif
                      00163      ifdef __12F510 
                      00164 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00165 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00166 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00167      endif
                      00168 ;###############################################################################
                      00169 ; DEFAULT STARTING FREQUENCY and VOLUME - Enter your own Frequency
                      00170 ;###############################################################################
                      00171 
  00000083            00172 volume_init EQU 0x03 | 1<<7 ;0x80; Initial Volume = 3 // [0..15]
                      00173 
  00000397            00174 freq  EQU d'919'        ;   91.9 MHz
                      00175 ;freq  EQU d'943'       ;   94.3 MHz
                      00176 ;freq  EQU d'1040'      ;  104.0 MHz
                      00177 
  00000031            00178 freqB EQU (freq - 366) ; BAND = 0 : 87~108 MHz (US/Europe)
  0000000C            00179 freqH EQU (freqB >> 2)    ; Frequency = Channel Spacing(kHz) x CHAN + 87.0 MHz
  00000040            00180 freqL EQU ((freqB&3) << 6); ; Shift channel selection for matching register 0x03
                      00181 
0000                  00182         ORG    H'0000'
                      00183  
0000   0EFE           00184     andlw   ~1
0001   0025           00185     movwf   OSCCAL
                      00186 
                      00187  ifdef __10F204
                      00188         movlw  B'00000000'       ;Use as Digital I/O 
                      00189         movwf  CMCON0            ;Disable Digital Comparator function
                      00190  endif
                      00191 
                      00192  ifdef __10F206
                      00193         movlw  B'00000000'   ;Use as Digital I/O 
                      00194         movwf  CMCON0            ;Disable Digital Comparator function
                      00195  endif
                      00196  ifdef __10F220
                      00197         movlw  B'00000000'   ;Use as Digital I/O 
                      00198         movwf  ADCON0            ;Disable Digital Comparator function
                      00199  endif
                      00200  ifdef __10F222
0002   0C00           00201         movlw  B'00000000'   ;Use as Digital I/O 
0003   0027           00202         movwf  ADCON0            ;Disable Digital Comparator function
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00203  endif
                      00204  ifdef __12F510
                      00205         movlw  B'00000000'   ;Use as Digital I/O 
                      00206         movwf  CM1CON0           ;Disable Digital Comparator function
                      00207         movlw  B'00000000'   ;Use as Digital I/O 
                      00208         movwf  ADCON0            ;Disable ADC function
                      00209  endif
                      00210 
0004                  00211 INIT:
0004   0C97           00212     MOVLW  ~((1<<T0CS)|(1<<NOT_GPPU)|(1<<PSA))
0005   0002           00213     OPTION                ;Enable GPIO2 and pull-ups
0006   0C3F           00214     MOVLW  0x3F           ;Save 0x3F into 'port' register [0x0F] for 10F20X dev
0007   002D           00215     MOVWF  port           ;It's used to switch SDA/SCL pins direction
0008   0006           00216     TRIS   GPIO           ;Set all pins as inputs
                      00217 
0009   0CFF           00218     MOVLW  0xFF           ;Perform 200 ms delay
000A   098F           00219     CALL   DELAY          ;to let the power stabilize
                      00220 ;###############################################################################
000B   0CFF           00221     MOVLW  0xFF           ;Perform 400 ms delay
000C   098F           00222     CALL   DELAY          ;to let the power stabilize
                      00223 
000D   0CFF           00224     MOVLW  0xFF           ;Perform 600 ms delay
000E   098F           00225     CALL   DELAY          ;to let the power stabilize
                      00226 ;
000F   0CFF           00227     MOVLW  0xFF           ;Perform 800 ms delay
0010   098F           00228     CALL   DELAY          ;to let the power stabilize
                      00229 ;###############################################################################
0011   0066           00230     CLRF   GPIO           ;Clear GPIO to set all pins to 0
                      00231 
0012   0C83           00232     movlw volume_init     ;0x83 ////////////
0013   0C0F           00233     movlw volume
                      00234 
0014   0C40           00235     movlw freqL           ;91.90 MHz
0015   0030           00236     movwf frequency_l
                      00237 
0016   0C0C           00238     movlw freqH           ;91.90 MHz
0017   0031           00239     movwf frequency_h
                      00240 ;
0018   0CC0           00241     MOVLW  0xC0           ;Implement AND operation between 0xC0
0019   0170           00242     ANDWF  frequency_l, F ;and 'frequency_l' to clear its last 6 bits
001A   0590           00243     BSF    frequency_l, 4 ;Set bit 4 (Tune) to adjust the frequency
                      00244 
                      00245 ;START_RADIO:              ;Start FM radio
001B   095F           00246     CALL   I2C_START      ;Issue I2C Start condition
001C   0C20           00247     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
001D   0966           00248     CALL   I2C_WRITE_BYTE ;Write the radio address via i2C
001E   0CC0           00249     MOVLW  0xC0           ;Write high byte into radio register 0x02
                      00250 ;   MOVLW  0xD0           ;TEST added to enable BASS 
001F   0966           00251     CALL   I2C_WRITE_BYTE
0020   0C01           00252     MOVLW  0x01           ;Write  low byte into radio register 0x02
0021   0966           00253     CALL   I2C_WRITE_BYTE
0022   0211           00254     MOVF   frequency_h, W ;Write high byte into radio register 0x03
0023   0966           00255     CALL   I2C_WRITE_BYTE
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0024   0210           00256     MOVF   frequency_l, W ;Write  low byte into radio register 0x03
0025   0966           00257     CALL   I2C_WRITE_BYTE
0026   0962           00258     CALL   I2C_STOP       ;Issue I2C Stop condition
                      00259 
0027   0C0F           00260     MOVLW  0x0F           ;Implement AND operation between 0xC0
0028   016F           00261     ANDWF  volume, F      ;and 'volume' to clear its higher 4 bits
0029   05EF           00262     BSF    volume, 7      ;Set bit 7  to select correct LNA input
002A   0A32           00263     GOTO   SET_VOLUME     ;And go to the 'SET_VOLUME' label
                      00264 
002B                  00265 LOOP:                     
                      00266 
                      00267 ;BUTTONS_LOOP:             ;Loop while button is pressed
                      00268 
002B                  00269 INCREASE_VOLUME:          ;Otherwise start 'INCREASE_VOLUME'
002B   02AF           00270     INCF   volume, F      ;Increment the 'volume' register
002C   068F           00271     BTFSC  volume, 4      ;If bit 4 becomes set (volume = 0b10010000)
002D   00EF           00272     DECF   volume, F      ;then decrement the 'volume' to get 0b10001111
002E   0A32           00273     GOTO   SET_VOLUME     ;and go to the 'SET_VOLUME' label
002F                  00274 DECREASE_VOLUME:          ;Decrease the volume here
002F   00EF           00275     DECF   volume, F      ;Decrement the 'volume' register
0030   07EF           00276     BTFSS  volume, 7      ;If bit 7 becomes 0 (volume = 0b01111111)
0031   02AF           00277     INCF   volume, F      ;then increment the 'volume' to get 0b10000000
0032                  00278 SET_VOLUME:               ;Set the radio volume
0032   095F           00279     CALL   I2C_START      ;Issue I2C start condition
0033   0C22           00280     MOVLW  0x22           ;Radio chip address for random writing is 0x22
0034   0966           00281     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
0035   0C05           00282     MOVLW  0x05           ;Set the register number to write to (0x05)
0036   0966           00283     CALL   I2C_WRITE_BYTE ;And write it via I2C
0037   0C88           00284     MOVLW  0x88           ;Set the high byte of 0x05 register (default value)
0038   0966           00285     CALL   I2C_WRITE_BYTE ;And write it via i2C
0039   020F           00286     MOVF   volume, W      ;Set the 'volume' as low byte of 0x05 register
003A   0966           00287     CALL   I2C_WRITE_BYTE ;And write it via I2C
003B   0962           00288     CALL   I2C_STOP       ;Issue Stop condition
                      00289 
003C   0A96           00290     GOTO   _LOOP           ;And return to the 'LOOP' label
                      00291 
                      00292 ;CHANNEL_SEEK:             ;Here button is released and we check what to do
                      00293 
003D                  00294 CH_UP:
003D   095F           00295     CALL   I2C_START      ;Issue I2C Start condition
003E   0C20           00296     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
003F   0966           00297     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
                      00298 
0040   0CC3           00299     MOVLW  0xC3           ;Otherwise set 0xC3 as high byte of 0x02 register
0041   0966           00300     CALL   I2C_WRITE_BYTE ;And write it via I2C
0042   0C01           00301     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
0043   0966           00302     CALL   I2C_WRITE_BYTE ;And write it via I2C
0044   0962           00303     CALL   I2C_STOP       ;Issue I2C Stop condition
0045   0A96           00304     GOTO   _LOOP           ;And return to the 'LOOP' labe;
                      00305 
0046                  00306 SEEK_DOWN:                ;Seek the station down
                      00307 
0046   095F           00308     CALL   I2C_START      ;ADDEDIssue I2C Start condition
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0047   0C20           00309     MOVLW  0x20           ;ADDEDRadio chip address for sequential writing is 0x20
0048   0966           00310     CALL   I2C_WRITE_BYTE ;ADDEDWrite the radio address via I2C
                      00311 
0049   0CC1           00312     MOVLW  0xC1           ;Set 0xC1 as high byte of 0x02 register
004A   0966           00313     CALL   I2C_WRITE_BYTE ;Ending of previous transaction
004B   0C01           00314     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
004C   0966           00315     CALL   I2C_WRITE_BYTE ;And write it via I2C
004D   0962           00316     CALL   I2C_STOP       ;Issue I2C Stop condition
004E   0A96           00317     GOTO   _LOOP           ;And return to the 'LOOP' labe;
                      00318 
                      00319 ;-------------Helper subroutines---------------
004F                  00320 SDA_HIGH:                 ;Set SDA pin high
004F   054D           00321     BSF    port, SDA      ;Set 'sda' bit in the 'port' to make it input
0050   020D           00322     MOVF   port, W        ;Copy 'port' into W register
0051   0006           00323     TRIS   GPIO           ;And set it as TRISGPIO value
0052   0800           00324     RETLW  0
                      00325 
0053                  00326 SDA_LOW:                  ;Set SDA pin low
0053   044D           00327     BCF    port, SDA      ;Reset 'sda' bit in the 'port' to make it output
0054   020D           00328     MOVF   port, W        ;Copy 'port' into W register
0055   0006           00329     TRIS   GPIO           ;And set it as TRISGPIO value
0056   0800           00330     RETLW  0
                      00331 
0057                  00332 SCL_HIGH:                 ;Set SCL pin high
0057   052D           00333     BSF    port, SCL      ;Set 'scl' bit in the 'port' to make it input
0058   020D           00334     MOVF   port, W        ;Copy 'port' into W register
0059   0006           00335     TRIS   GPIO           ;And set it as TRISGPIO value
005A   0800           00336     RETLW  0
                      00337 
005B                  00338 SCL_LOW:                  ;Set SCL pin low
005B   042D           00339     BCF    port, SCL      ;Reset 'scl' bit in the 'port' to make it output
005C   020D           00340     MOVF   port, W        ;Copy 'port' into W register
005D   0006           00341     TRIS   GPIO           ;And set it as TRISGPIO value
005E   0800           00342     RETLW  0
                      00343 ;-------------I2C start condition--------------
005F                  00344 I2C_START:
005F   0957           00345     CALL   SCL_HIGH       ;Set SCL high
0060   0953           00346     CALL   SDA_LOW        ;Then set SDA low
0061   0800           00347     RETLW  0
                      00348 ;-------------I2C stop condition---------------
0062                  00349 I2C_STOP:
0062   0953           00350     CALL   SDA_LOW        ;Set SDA low
0063   0957           00351     CALL   SCL_HIGH       ;Set SCL high
0064   094F           00352     CALL   SDA_HIGH       ;Then set SDA highs and release the bus
0065   0800           00353     RETLW  0
                      00354 ;------------I2C write byte--------------------
0066                  00355 I2C_WRITE_BYTE:
0066   002C           00356     MOVWF  i2c_data       ;Load 'i2c_data' from W register
0067   0C08           00357     MOVLW  8              ;Load value 8 into 'bit_count'
0068   002B           00358     MOVWF  bit_count      ;to indicate we're going to send 8 bits
0069                  00359 I2C_WRITE_BIT:            ;Write single bit to I2C
0069   095B           00360     CALL   SCL_LOW        ;Set SCL low, now we can change SDA
006A   07EC           00361     BTFSS  i2c_data, 7    ;Check the MSB of 'i2c_data'
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

006B   0A6E           00362     GOTO   I2C_WRITE_0    ;If it's 0 then go to the 'I2C_WRITE_0' label
006C                  00363 I2C_WRITE_1:              ;Else continue with 'I2C_WRITE_1'
006C   094F           00364     CALL   SDA_HIGH       ;Set SDA high
006D   0A6F           00365     GOTO   I2C_SHIFT      ;And go to the 'I2C_SHIFT' label
006E                  00366 I2C_WRITE_0:
006E   0953           00367     CALL   SDA_LOW        ;Set SDA low
006F                  00368 I2C_SHIFT:
006F   0957           00369     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
0070   036C           00370     RLF    i2c_data, F     ;Shift 'i2c_data' one bit to the left
0071   02EB           00371     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0072   0A69           00372     GOTO   I2C_WRITE_BIT  ;If not then return to the 'I2C_WRITE_BIT'
0073                  00373 I2C_CHECK_ACK:            ;Else check the acknowledgement bit
0073   095B           00374     CALL   SCL_LOW        ;Set I2C low to end the last pulse
0074   094F           00375     CALL   SDA_HIGH       ;Set SDA high to release the bus
0075   0957           00376     CALL   SCL_HIGH       ;Set I2C high to start the new pulse
0076   0206           00377     MOVF   GPIO, W        ;Copy the GPIO register value into the 'ack'
0077   002E           00378     MOVWF  ack            ;Now bit 'sda' of the 'ack' will contain ACK bit
0078   095B           00379     CALL   SCL_LOW        ;Set SCL low to end the acknowledgement bit
0079   0800           00380     RETLW  0
                      00381 ;------------I2C read byte--------------------
007A                  00382 I2C_READ_BYTE:
007A   0C08           00383     MOVLW  8              ;Load value 8 into 'bit_count'
007B   002B           00384     MOVWF  bit_count      ;to indicate we're going to receive 8 bits
007C   006C           00385     CLRF   i2c_data       ;Clear the 'i2c_data' register
007D                  00386 I2C_READ_BIT:             ;Read single bit from the I2C
007D   036C           00387     RLF    i2c_data, F    ;Shift the 'i2c_data' register one bit to the left
007E   095B           00388     CALL   SCL_LOW        ;Set SCL low to prepare for the new bit
007F   0957           00389     CALL   SCL_HIGH       ;Set SCL high to read the bit value
0080   0646           00390     BTFSC  GPIO, SDA      ;Check the 'sda' bit in the GPIO register
0081   050C           00391     BSF    i2c_data, 0    ;if it's 1 then set the LSB of the 'i2c_data'
0082   02EB           00392     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0083   0A7D           00393     GOTO   I2C_READ_BIT   ;If not, then return to the 'I2C_READ_BIT'
0084   095B           00394     CALL   SCL_LOW        ;Set SCL low to end the last pulse
0085   0800           00395     RETLW  0              ;Otherwise return from the subroutine
                      00396 ;----------I2C send ACK----------------------
0086                  00397 I2C_ACK:
0086   0953           00398     CALL   SDA_LOW        ;Set SDA low to issue ACK condition
0087   0957           00399     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
0088   095B           00400     CALL   SCL_LOW        ;Set SCL low to end the pulse
0089   094F           00401     CALL   SDA_HIGH       ;Set SDA high to release the bus
008A   0800           00402     RETLW  0
                      00403 ;----------I2C send NACK----------------------
008B                  00404 I2C_NACK:
008B   094F           00405     CALL   SDA_HIGH       ;Set SDA low to issue NACK condition
008C   0957           00406     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
008D   095B           00407     CALL   SCL_LOW        ;Set SCL low to end the pulse
008E   0800           00408     RETLW  0
                      00409 ;-------------Delay subroutine--------------
008F                  00410 DELAY:                    ;Start DELAY subroutine here  
008F   0029           00411     MOVWF  i              ;Copy the value to the register i
0090   002A           00412     MOVWF  j              ;Copy the value to the register j
0091                  00413 DELAY_LOOP:               ;Start delay loop
0091   02E9           00414     DECFSZ i, F           ;Decrement i and check if it is not zero
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0092   0A91           00415     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0093   02EA           00416     DECFSZ j, F           ;Decrement j and check if it is not zero
0094   0A91           00417     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0095   0800           00418     RETLW  0              ;Else return from the subroutine
                      00419 ;##############################################################################
                      00420 ;---IR REMOTE CONTROL 38kHz ROUTINE----------------/[NEC]\---------------------
                      00421 ;##############################################################################
0096                  00422 _LOOP:                    ;Main loop of the program
                      00423 ;---------------Wait for the preamble positive pulse---------------------
0096   0666           00424     BTFSC GPIO, IRx       ;Wait while 'ir' pin goes down
0097   0A96           00425     GOTO _LOOP           ;If it's high then return to 'LOOP'
0098   0061           00426     CLRF  TMR0           ;Otherwise clear the timer register
0099   0766           00427     BTFSS GPIO, IRx       ;And wait while 'ir' is low
009A   0A99           00428     GOTO  $-1
009B   0201           00429     MOVF  TMR0, W        ;Copy the TMR0 value into the W register
009C   0032           00430     MOVWF _count         ;and save the value into the 'count' register
009D   0C1E           00431     MOVLW d'30'          ;Load 30 into W (256 us x 32 = 7.7 ms)
009E   0092           00432     SUBWF _count, W      ;And subtract W from 'count'
009F   0703           00433     BTFSS STATUS, C      ;If 'count' < 30 (pulse is shorter than 7.7 ms)
00A0   0A96           00434     GOTO  _LOOP          ;then return to 'LOOP'
00A1   0C2D           00435     MOVLW d'45'          ;Load 45 into W (256 us x 45 = 11.5 ms)
00A2   0092           00436     SUBWF _count, W      ;And subtract W from 'count'
00A3   0603           00437     BTFSC STATUS, C      ;If 'count' > 45 (pulse is longer than 8 ms)
00A4   0A96           00438     GOTO _LOOP           ;then return to 'LOOP'
                      00439 ;---------------Check the preamble negative pulse---------------------
00A5   0061           00440     CLRF TMR0            ;Otherwise clear the timer register
00A6   0666           00441     BTFSC GPIO, IRx       ;And wait while 'ir' is high
00A7   0AA6           00442     GOTO $-1
00A8   0201           00443     MOVF TMR0, W         ;Copy the TMR0 value into the W register
00A9   0032           00444     MOVWF _count         ;and save the value into the 'count' register
00AA   0C0D           00445     MOVLW d'13'          ;Load 15 into W (256 us x 13 = 3.3 ms)
00AB   0092           00446     SUBWF _count, W      ;And subtract W from 'count'
00AC   0703           00447     BTFSS STATUS, C      ;If 'count' < 13 (pulse is shorter than 3.3 ms)
00AD   0A96           00448     GOTO _LOOP           ;then return to 'LOOP'
00AE   0C14           00449     MOVLW d'20'          ;Load 20 into W (256 us x 20 = 5.1 ms)
00AF   0092           00450     SUBWF _count, W      ;And subtract W from 'count'
00B0   0603           00451     BTFSC STATUS, C      ;If 'count' > 20 (pulse is longer than 5.1 ms)
00B1   0A96           00452     GOTO _LOOP           ;then return to 'LOOP'
                      00453 ;---------------Receive the command bytes-----------------------------
00B2   0073           00454     CLRF _byte_count     ;Clear the 'byte_count' register    
00B3   0C15           00455     MOVLW _ir_data       ;Load the address of the 'ir_data' into W
00B4   0024           00456     MOVWF FSR            ;and save it to the indirect pointer register
00B5                  00457 _RECEIVE_BYTE:
00B5   0074           00458     CLRF _bit_count      ;Clear the 'bit_count' register
00B6   0060           00459     CLRF INDF            ;Clear the indirectly addressed register
00B7                  00460 _RECEIVE_BIT:
00B7   0320           00461     RRF INDF, F          ;Shift the INDF register to the right
                      00462 ;---------------Receive the positive pulse of the bit-----------------
00B8   0061           00463     CLRF TMR0           ;Otherwise clear the timer register
00B9   0766           00464     BTFSS GPIO, IRx      ;And wait while 'ir' is low
00BA   0AB9           00465     GOTO $-1
00BB   0201           00466     MOVF TMR0, W        ;Copy the TMR0 value into the W register
00BC   0032           00467     MOVWF _count         ;and save the value into the 'count' register
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00BD   0C01           00468     MOVLW 1             ;Load 1 into W (256 us x 1 = 0.26 ms)
00BE   0092           00469     SUBWF _count, W      ;And subtract W from 'count'
00BF   0703           00470     BTFSS STATUS, C     ;If 'count' < 1 (pulse is shorter than 0.26 ms)
00C0   0A96           00471     GOTO _LOOP           ;then return to 'LOOP'
00C1   0C03           00472     MOVLW 3             ;Load 3 into W (256 us x 3 = 0.77 ms)
00C2   0092           00473     SUBWF _count, W      ;And subtract W from 'count'
00C3   0603           00474     BTFSC STATUS, C     ;If 'count' > 3 (pulse is longer than 0.77 ms)
00C4   0A96           00475     GOTO _LOOP           ;then return to 'LOOP'
                      00476 ;---------------Receive the negative pulse of the bit-----------------
00C5   0061           00477     CLRF TMR0           ;Otherwise clear the timer register
00C6   0666           00478     BTFSC GPIO, IRx     ;And wait while 'ir' is high
00C7   0AC6           00479     GOTO $-1
00C8   0201           00480     MOVF TMR0, W        ;Copy the TMR0 value into the W register
00C9   0032           00481     MOVWF _count        ;and save the value into the 'count' register
00CA   0C04           00482     MOVLW 4;///////////             ;Load 5 into W (256 us x 4 = 1.1 ms)
00CB   0092           00483     SUBWF _count, W      ;And subtract W from 'count'
00CC   0703           00484     BTFSS STATUS, C     ;If 'count' < 4 (pulse is shorter than 1.1 ms)
00CD   0AD3           00485     GOTO _NEXT_BIT       ;then go to the 'NEXT_BIT' label
00CE   0C08           00486     MOVLW 8             ;Load 8 into W (256 us x 8 = 2 ms)
00CF   0092           00487     SUBWF _count, W      ;And subtract W from 'count'
00D0   0603           00488     BTFSC STATUS, C     ;If 'count' > 8 (pulse is longer than 2 ms)
00D1   0A96           00489     GOTO _LOOP           ;then go to the 'LOOP' label
00D2   05E0           00490     BSF INDF, 7         ;Set the MSB of the INDF register
00D3                  00491 _NEXT_BIT:
00D3   02B4           00492     INCF _bit_count, F   ;Increment the 'bit_count' register
00D4   0774           00493     BTFSS _bit_count, 3  ;Check if 'bit_count' becomes 8
00D5   0AB7           00494     GOTO _RECEIVE_BIT    ;If it's not, then return to 'RECEIVE_BIT' label
00D6   02B3           00495     INCF _byte_count, F  ;Increment the 'byte_count' register
00D7   0653           00496     BTFSC _byte_count, 2 ;Check if 'byte_count' becomes 4    
00D8   0ADB           00497     GOTO _CHECK_DATA     ;If it is then go to 'CHECK_DATA' label
00D9   02A4           00498     INCF FSR, F         ;Increment the indirect addressing pointer
00DA   0AB5           00499     GOTO _RECEIVE_BYTE   ;and go to 'RECEIVE_BYTE' label
                      00500 
00DB                  00501 _CHECK_DATA:
00DB   0256           00502     COMF _ir_data+1, W   ;Negate the second received byte
00DC   0195           00503     XORWF _ir_data, W    ;And implement the XOR between 1st and 2nd bytes
00DD   0743           00504     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00DE   0A96           00505     GOTO _LOOP           ;Then return to the 'LOOP' label
00DF   0258           00506     COMF _ir_data+3, W   ;Negate the fourth received byte
00E0   0197           00507     XORWF _ir_data+2, W  ;And implement the XOR between 3rd and 4th bytes
00E1   0743           00508     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00E2   0A96           00509     GOTO _LOOP           ;Then return to the 'LOOP' label
                      00510 
00E3   0C05           00511     MOVLW 0x05           ;Check the VOL- button (code 0x05)
00E4   0197           00512     XORWF _ir_data+2, W  ;If command is not 0x05
00E5   0743           00513     BTFSS STATUS, Z
00E6   0AE8           00514     GOTO $+2             ;then skip the next line
00E7   0A2F           00515         goto DECREASE_VOLUME
                      00516 
00E8   0C06           00517     MOVLW 0x06           ;Check the VOL+ button (code 0x06)
00E9   0197           00518     XORWF _ir_data+2, W  ;If command is not 0x06
00EA   0743           00519     BTFSS STATUS, Z
00EB   0AED           00520     GOTO $+2             ;then skip the next line
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00EC   0A2B           00521         goto INCREASE_VOLUME
                      00522 
00ED   0C02           00523     MOVLW 0x02           ;Check the << CH- button (code 0x02)
00EE   0197           00524     XORWF _ir_data+2, W  ;If command is not 0x02
00EF   0743           00525     BTFSS STATUS, Z
00F0   0AF2           00526     GOTO $+2             ;then skip the next line
00F1   0A46           00527         goto SEEK_DOWN 
                      00528 
00F2   0C03           00529     MOVLW 0x03           ;Check the W button (code 0x03)
00F3   0197           00530     XORWF _ir_data+2, W  ;If command is not 0x03
00F4   0743           00531     BTFSS STATUS, Z
00F5   0AF7           00532     GOTO $+2    ;$+2   ;then skip the next three lines
00F6   0A3D           00533         goto CH_UP ;////////////////////////
                      00534 
00F7   0A96           00535     GOTO _LOOP           ;and go to the 'SET_OUTPUT' label
                      00536 
                      00537     END                   ;/* END of the Program */
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

ADCON0                            00000007
ADON                              00000000
ADRES                             00000008
ADRES0                            00000000
ADRES1                            00000001
ADRES2                            00000002
ADRES3                            00000003
ADRES4                            00000004
ADRES5                            00000005
ADRES6                            00000006
ADRES7                            00000007
ANS0                              00000006
ANS1                              00000007
C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CHS0                              00000002
CHS1                              00000003
CH_UP                             0000003D
DC                                00000001
DECREASE_VOLUME                   0000002F
DELAY                             0000008F
DELAY_LOOP                        00000091
F                                 00000001
FOSC4                             00000000
FSR                               00000004
GO                                00000001
GO_NOT_DONE                       00000001
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GPIO                              00000006
GPWUF                             00000007
I2C_ACK                           00000086
I2C_CHECK_ACK                     00000073
I2C_NACK                          0000008B
I2C_READ_BIT                      0000007D
I2C_READ_BYTE                     0000007A
I2C_SHIFT                         0000006F
I2C_START                         0000005F
I2C_STOP                          00000062
I2C_WRITE_0                       0000006E
I2C_WRITE_1                       0000006C
I2C_WRITE_BIT                     00000069
I2C_WRITE_BYTE                    00000066
INCREASE_VOLUME                   0000002B
INDF                              00000000
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

INIT                              00000004
IRx                               00000003
LOOP                              0000002B
MAXRAM                            0000001F
NOT_DONE                          00000001
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OSCCAL                            00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
RAM                               00000009
RAM_                              00000019
SCL                               00000001
SCL_HIGH                          00000057
SCL_LOW                           0000005B
SDA                               00000002
SDA_HIGH                          0000004F
SDA_LOW                           00000053
SEEK_DOWN                         00000046
SET_VOLUME                        00000032
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
W                                 00000000
Z                                 00000002
_CHECK_DATA                       000000DB
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_IDLOC0                           00000200
_IDLOC1                           00000201
_IDLOC2                           00000202
_IDLOC3                           00000203
_IOFSCS_4MHZ                      00000FFE
_IOFSCS_8MHZ                      00000FFF
_IOSCFS_4MHZ                      00000FFE
_IOSCFS_8MHZ                      00000FFF
_LOOP                             00000096
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_MCPU_OFF                         00000FFF
_MCPU_ON                          00000FFD
_NEXT_BIT                         000000D3
_RECEIVE_BIT                      000000B7
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-31-2025  22:47:21         PAGE 14


SYMBOL TABLE
  LABEL                             VALUE 

_RECEIVE_BYTE                     000000B5
_WDTE_OFF                         00000FFB
_WDTE_ON                          00000FFF
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
__10F222                          00000001
_bit_count                        00000014
_byte_count                       00000013
_count                            00000012
_ir_data                          00000015
ack                               0000000E
bit_count                         0000000B
freq                              00000397
freqB                             00000031
freqH                             0000000C
freqL                             00000040
frequency_h                       00000011
frequency_l                       00000010
i                                 00000009
i2c_data                          0000000C
j                                 0000000A
port                              0000000D
volume                            0000000F
volume_init                       00000083


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXX--------
0200 : XXXX------------ ---------------- ---------------- ----------------
0FC0 : ---------------- ---------------- ---------------- ---------------X

All other memory blocks unused.

Program Memory Words Used:   248
Program Memory Words Free:   264


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

