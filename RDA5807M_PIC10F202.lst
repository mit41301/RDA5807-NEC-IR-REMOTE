MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ; TITLE       PIC20X+PIC12F50X+RDA5807M+NEC_IR.asm                              *
                      00003 ; SUBTITLE    PIC10F200,10F202,10F204,10F206,PIC12F508,12F509 & 12F510          *
                      00004 ; CONTENTS:  I²C RDA5807M + IR REMOTE Control                                  *
                      00005 ; EDITOR:    @mit41301                                                         *
                      00006 ; UPDATED:   15/08/2025                                                        *
                      00007 ;*******************************************************************************
                      00008  
                      00009  ifdef __12F510
                      00010  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF & _IOSCFS_OFF
                      00011  else 
0FFF   0FEB           00012  __CONFIG _IntRC_OSC & _WDT_OFF & _CP_OFF & _MCLRE_OFF
                      00013  endif
                      00014 
0200   0005 0008 0000 00015  __idlocs H'5807'
       0007 
                      00016 
                      00017  ifdef __10F200
                      00018  include "p10F200.inc"
                      00019  list    p=10F200
                      00020  endif
                      00021  ifdef __10F202
                      00022  include "p10F202.inc"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC10F202 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00150         LIST
                      00023  list    p=10F202
                      00024  endif
                      00025  ifdef __10F204
                      00026  include "p10F204.inc"
                      00027  list    p=10F204
                      00028  endif
                      00029  ifdef __10F206
                      00030  include "p10F206.inc"
                      00031  list    p=10F206
                      00032  endif  
                      00033  ifdef __12F508
                      00034  include "p12F508.inc"
                      00035  list    p=12F508
                      00036  endif
                      00037  ifdef __12F509
                      00038  include "p12F509.inc"
                      00039  list    p=12F509
                      00040  endif
                      00041  ifdef __12F510
                      00042  include "p12F510.inc"
                      00043  list    p=12F510
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044  endif
                      00045 
                      00046  errorlevel +205,+207,+302,+305,+306, +224
                      00047 
                      00048 ;*******************************************************************************
                      00049 ; File register usage                                                          *
                      00050 ;*******************************************************************************
                      00051     ifdef __10F200
                      00052 RAM     EQU  H'0010'
                      00053 MAXRAM  EQU  H'001F'
                      00054     endif
                      00055     ifdef __10F202
  00000008            00056 RAM     EQU  h'0008'
  0000001F            00057 MAXRAM  EQU  H'001F'
                      00058     endif
                      00059     ifdef __10F204
                      00060 RAM     EQU  H'0010'
                      00061 MAXRAM  EQU  H'0020'
                      00062     endif
                      00063     ifdef __10F206
                      00064 RAM     EQU  h'0008'
                      00065 MAXRAM  EQU  H'001F'
                      00066     endif
                      00067     ifdef __12F508
                      00068 RAM     EQU  h'0007'
                      00069 MAXRAM  EQU  H'001F'
                      00070     endif
                      00071     ifdef __12F509
                      00072 RAM     EQU  H'0007'
                      00073 MAXRAM  EQU  H'003F'
                      00074         endif
                      00075     ifdef __12F510
                      00076 RAM     EQU  H'000A'
                      00077 MAXRAM  EQU  H'003F'
                      00078     endif
                      00079 ;********************************************************************
                      00080                 CBLOCK RAM      
                      00081 ;********************************************************************
  00000008            00082 i           ;EQU    010h    ;Delay variable
  00000009            00083 j           ;EQU    011h    ;Delay variable
  0000000A            00084 bit_count   ;EQU    012h    ;Counter of processed bits in I2C
  0000000B            00085 i2c_data    ;EQU    013h    ;Data to receive/transmit via I2C
  0000000C            00086 port        ;EQU    014h    ;Helper register to implement I2C
  0000000D            00087 ack         ;EQU    015h    ;Acknowledgment received from the device
  0000000E            00088 volume      ;EQU    016h    ;Radio volume level
  0000000F            00089 frequency_l ;EQU    017h    ;Frequency low byte
  00000010            00090 frequency_h ;EQU    0018h    ;Frequency high byte
                      00091 ;********************************************************************
  00000011            00092 _count      ;EQU    019h    ;Saved value of the timer
  00000012            00093 _byte_count ;EQU    01Ah    ;Counter of processed bytes
  00000013            00094 _bit_count  ;EQU    01Bh    ;Counter of processed bits
  00000014            00095 _ir_data:4  ;EQU    01Ch    ;First IR byte
                      00096 ;********************************************************************
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000018            00097 RAM_            
                      00098                 ENDC
                      00099 
                      00100     if (RAM_-1) > MAXRAM
                      00101         error "File register usage OVERFLOW"
                      00102     endif
                      00103 ;###############################################################################
                      00104      ifdef __10F200
                      00105 SDA        EQU    GP2    ;SDA pin of the I2C
                      00106 SCL        EQU    GP1    ;SCL pin of the I2C
                      00107 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00108      endif
                      00109      ifdef __10F202
  00000002            00110 SDA        EQU    GP2    ;SDA pin of the I2C
  00000001            00111 SCL        EQU    GP1    ;SCL pin of the I2C
  00000003            00112 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00113      endif
                      00114      ifdef __10F204
                      00115 SDA        EQU    GP2    ;SDA pin of the I2C
                      00116 SCL        EQU    GP1    ;SCL pin of the I2C
                      00117 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00118      endif
                      00119      ifdef __10F206
                      00120 SDA        EQU    GP2    ;SDA pin of the I2C
                      00121 SCL        EQU    GP1    ;SCL pin of the I2C
                      00122 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz) 
                      00123      endif
                      00124      ifdef __12F508 
                      00125 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00126 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00127 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00128      endif
                      00129      ifdef __12F509 
                      00130 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00131 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00132 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00133      endif
                      00134      ifdef __12F510 
                      00135 IRx        EQU    GP3    ;INPUT ONLY PIN(IR Rx 38kHz)
                      00136 SCL        EQU    GP4    ;SCL pin of the I²C Bus
                      00137 SDA        EQU    GP5    ;SDA pin of the I²C Bus
                      00138      endif
                      00139 ;###############################################################################
                      00140 ; DEFAULT STARTING FREQUENCY and VOLUME - Enter your own Frequency
                      00141 ;###############################################################################
                      00142 
  00000083            00143 volume_init EQU 0x03 | 1<<7 ;0x80; Initial Volume = 3 // [0..15]
                      00144 
  00000397            00145 freq  EQU d'919'        ;   91.9 MHz
                      00146 ;freq  EQU d'943'       ;   94.3 MHz
                      00147 ;freq  EQU d'1040'      ;  104.0 MHz
                      00148 
  00000031            00149 freqB EQU (freq - 366) ; BAND = 0 : 87~108 MHz (US/Europe)
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000C            00150 freqH EQU (freqB >> 2)    ; Frequency = Channel Spacing(kHz) x CHAN + 87.0 MHz
  00000040            00151 freqL EQU ((freqB&3) << 6); ; Shift channel selection for matching register 0x03
                      00152 
0000                  00153         ORG    H'0000'
                      00154  
0000   0EFE           00155     andlw   ~1
0001   0025           00156     movwf   OSCCAL
                      00157 
                      00158  ifdef __10F204
                      00159         movlw  B'00000000'       ;Use as Digital I/O 
                      00160         movwf  CMCON0            ;Disable Digital Comparator function
                      00161  endif
                      00162 
                      00163  ifdef __10F206
                      00164         movlw  B'00000000'   ;Use as Digital I/O 
                      00165         movwf  CMCON0            ;Disable Digital Comparator function
                      00166  endif
                      00167  ifdef __12F510
                      00168         movlw  B'00000000'   ;Use as Digital I/O 
                      00169         movwf  CM1CON0           ;Disable Digital Comparator function
                      00170         movlw  B'00000000'   ;Use as Digital I/O 
                      00171         movwf  ADCON0            ;Disable ADC function
                      00172  endif
                      00173 
0002                  00174 INIT:
0002   0C97           00175     MOVLW  ~((1<<T0CS)|(1<<NOT_GPPU)|(1<<PSA))
0003   0002           00176     OPTION                ;Enable GPIO2 and pull-ups
0004   0C3F           00177     MOVLW  0x3F           ;Save 0x3F into 'port' register [0x0F] for 10F20X dev
0005   002C           00178     MOVWF  port           ;It's used to switch SDA/SCL pins direction
0006   0006           00179     TRIS   GPIO           ;Set all pins as inputs
                      00180 
0007   0CFF           00181     MOVLW  0xFF           ;Perform 200 ms delay
0008   098D           00182     CALL   DELAY          ;to let the power stabilize
                      00183 ;###############################################################################
0009   0CFF           00184     MOVLW  0xFF           ;Perform 400 ms delay
000A   098D           00185     CALL   DELAY          ;to let the power stabilize
                      00186 
000B   0CFF           00187     MOVLW  0xFF           ;Perform 600 ms delay
000C   098D           00188     CALL   DELAY          ;to let the power stabilize
                      00189 ;
000D   0CFF           00190     MOVLW  0xFF           ;Perform 800 ms delay
000E   098D           00191     CALL   DELAY          ;to let the power stabilize
                      00192 ;###############################################################################
000F   0066           00193     CLRF   GPIO           ;Clear GPIO to set all pins to 0
                      00194 
0010   0C83           00195         movlw volume_init;  0x83 ////////////
0011   0C0E           00196         movlw volume
                      00197 
0012   0C40           00198         movlw freqL ;91.90 MHz
0013   002F           00199         movwf frequency_l
                      00200 
0014   0C0C           00201         movlw freqH ;91.90 MHz
0015   0030           00202         movwf frequency_h
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00203 ;
0016   0CC0           00204     MOVLW  0xC0           ;Implement AND operation between 0xC0
0017   016F           00205     ANDWF  frequency_l, F ;and 'frequency_l' to clear its last 6 bits
0018   058F           00206     BSF    frequency_l, 4 ;Set bit 4 (Tune) to adjust the frequency
                      00207 
                      00208 ;START_RADIO:              ;Start FM radio
0019   095D           00209     CALL   I2C_START      ;Issue I2C Start condition
001A   0C20           00210     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
001B   0964           00211     CALL   I2C_WRITE_BYTE ;Write the radio address via i2C
001C   0CC0           00212     MOVLW  0xC0           ;Write high byte into radio register 0x02
                      00213 ;   MOVLW  0xD0           ;TEST added to enable BASS 
001D   0964           00214     CALL   I2C_WRITE_BYTE
001E   0C01           00215     MOVLW  0x01           ;Write  low byte into radio register 0x02
001F   0964           00216     CALL   I2C_WRITE_BYTE
0020   0210           00217     MOVF   frequency_h, W ;Write high byte into radio register 0x03
0021   0964           00218     CALL   I2C_WRITE_BYTE
0022   020F           00219     MOVF   frequency_l, W ;Write  low byte into radio register 0x03
0023   0964           00220     CALL   I2C_WRITE_BYTE
0024   0960           00221     CALL   I2C_STOP       ;Issue I2C Stop condition
                      00222 
0025   0C0F           00223     MOVLW  0x0F           ;Implement AND operation between 0xC0
0026   016E           00224     ANDWF  volume, F      ;and 'volume' to clear its higher 4 bits
0027   05EE           00225     BSF    volume, 7      ;Set bit 7  to select correct LNA input
0028   0A30           00226     GOTO   SET_VOLUME     ;And go to the 'SET_VOLUME' label
                      00227 
0029                  00228 LOOP:                     
                      00229 
                      00230 ;BUTTONS_LOOP:             ;Loop while button is pressed
                      00231 
0029                  00232 INCREASE_VOLUME:          ;Otherwise start 'INCREASE_VOLUME'
0029   02AE           00233     INCF   volume, F      ;Increment the 'volume' register
002A   068E           00234     BTFSC  volume, 4      ;If bit 4 becomes set (volume = 0b10010000)
002B   00EE           00235     DECF   volume, F      ;then decrement the 'volume' to get 0b10001111
002C   0A30           00236     GOTO   SET_VOLUME     ;and go to the 'SET_VOLUME' label
002D                  00237 DECREASE_VOLUME:          ;Decrease the volume here
002D   00EE           00238     DECF   volume, F      ;Decrement the 'volume' register
002E   07EE           00239     BTFSS  volume, 7      ;If bit 7 becomes 0 (volume = 0b01111111)
002F   02AE           00240     INCF   volume, F      ;then increment the 'volume' to get 0b10000000
0030                  00241 SET_VOLUME:               ;Set the radio volume
0030   095D           00242     CALL   I2C_START      ;Issue I2C start condition
0031   0C22           00243     MOVLW  0x22           ;Radio chip address for random writing is 0x22
0032   0964           00244     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
0033   0C05           00245     MOVLW  0x05           ;Set the register number to write to (0x05)
0034   0964           00246     CALL   I2C_WRITE_BYTE ;And write it via I2C
0035   0C88           00247     MOVLW  0x88           ;Set the high byte of 0x05 register (default value)
0036   0964           00248     CALL   I2C_WRITE_BYTE ;And write it via i2C
0037   020E           00249     MOVF   volume, W      ;Set the 'volume' as low byte of 0x05 register
0038   0964           00250     CALL   I2C_WRITE_BYTE ;And write it via I2C
0039   0960           00251     CALL   I2C_STOP       ;Issue Stop condition
                      00252 
003A   0A94           00253     GOTO   _LOOP           ;And return to the 'LOOP' label
                      00254 
                      00255 ;CHANNEL_SEEK:             ;Here button is released and we check what to do
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00256 
003B                  00257 CH_UP:
003B   095D           00258     CALL   I2C_START      ;Issue I2C Start condition
003C   0C20           00259     MOVLW  0x20           ;Radio chip address for sequential writing is 0x20
003D   0964           00260     CALL   I2C_WRITE_BYTE ;Write the radio address via I2C
                      00261 
003E   0CC3           00262     MOVLW  0xC3           ;Otherwise set 0xC3 as high byte of 0x02 register
003F   0964           00263     CALL   I2C_WRITE_BYTE ;And write it via I2C
0040   0C01           00264     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
0041   0964           00265     CALL   I2C_WRITE_BYTE ;And write it via I2C
0042   0960           00266     CALL   I2C_STOP       ;Issue I2C Stop condition
0043   0A94           00267     GOTO   _LOOP           ;And return to the 'LOOP' labe;
                      00268 
0044                  00269 SEEK_DOWN:                ;Seek the station down
                      00270 
0044   095D           00271     CALL   I2C_START      ;ADDEDIssue I2C Start condition
0045   0C20           00272     MOVLW  0x20           ;ADDEDRadio chip address for sequential writing is 0x20
0046   0964           00273     CALL   I2C_WRITE_BYTE ;ADDEDWrite the radio address via I2C
                      00274 
0047   0CC1           00275     MOVLW  0xC1           ;Set 0xC1 as high byte of 0x02 register
0048   0964           00276     CALL   I2C_WRITE_BYTE ;Ending of previous transaction
0049   0C01           00277     MOVLW  0x01           ;Set 0x01 as low byte of 0x02 register
004A   0964           00278     CALL   I2C_WRITE_BYTE ;And write it via I2C
004B   0960           00279     CALL   I2C_STOP       ;Issue I2C Stop condition
004C   0A94           00280     GOTO   _LOOP           ;And return to the 'LOOP' labe;
                      00281 
                      00282 ;-------------Helper subroutines---------------
004D                  00283 SDA_HIGH:                 ;Set SDA pin high
004D   054C           00284     BSF    port, SDA      ;Set 'sda' bit in the 'port' to make it input
004E   020C           00285     MOVF   port, W        ;Copy 'port' into W register
004F   0006           00286     TRIS   GPIO           ;And set it as TRISGPIO value
0050   0800           00287     RETLW  0
                      00288 
0051                  00289 SDA_LOW:                  ;Set SDA pin low
0051   044C           00290     BCF    port, SDA      ;Reset 'sda' bit in the 'port' to make it output
0052   020C           00291     MOVF   port, W        ;Copy 'port' into W register
0053   0006           00292     TRIS   GPIO           ;And set it as TRISGPIO value
0054   0800           00293     RETLW  0
                      00294 
0055                  00295 SCL_HIGH:                 ;Set SCL pin high
0055   052C           00296     BSF    port, SCL      ;Set 'scl' bit in the 'port' to make it input
0056   020C           00297     MOVF   port, W        ;Copy 'port' into W register
0057   0006           00298     TRIS   GPIO           ;And set it as TRISGPIO value
0058   0800           00299     RETLW  0
                      00300 
0059                  00301 SCL_LOW:                  ;Set SCL pin low
0059   042C           00302     BCF    port, SCL      ;Reset 'scl' bit in the 'port' to make it output
005A   020C           00303     MOVF   port, W        ;Copy 'port' into W register
005B   0006           00304     TRIS   GPIO           ;And set it as TRISGPIO value
005C   0800           00305     RETLW  0
                      00306 ;-------------I2C start condition--------------
005D                  00307 I2C_START:
005D   0955           00308     CALL   SCL_HIGH       ;Set SCL high
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

005E   0951           00309     CALL   SDA_LOW        ;Then set SDA low
005F   0800           00310     RETLW  0
                      00311 ;-------------I2C stop condition---------------
0060                  00312 I2C_STOP:
0060   0951           00313     CALL   SDA_LOW        ;Set SDA low
0061   0955           00314     CALL   SCL_HIGH       ;Set SCL high
0062   094D           00315     CALL   SDA_HIGH       ;Then set SDA highs and release the bus
0063   0800           00316     RETLW  0
                      00317 ;------------I2C write byte--------------------
0064                  00318 I2C_WRITE_BYTE:
0064   002B           00319     MOVWF  i2c_data       ;Load 'i2c_data' from W register
0065   0C08           00320     MOVLW  8              ;Load value 8 into 'bit_count'
0066   002A           00321     MOVWF  bit_count      ;to indicate we're going to send 8 bits
0067                  00322 I2C_WRITE_BIT:            ;Write single bit to I2C
0067   0959           00323     CALL   SCL_LOW        ;Set SCL low, now we can change SDA
0068   07EB           00324     BTFSS  i2c_data, 7    ;Check the MSB of 'i2c_data'
0069   0A6C           00325     GOTO   I2C_WRITE_0    ;If it's 0 then go to the 'I2C_WRITE_0' label
006A                  00326 I2C_WRITE_1:              ;Else continue with 'I2C_WRITE_1'
006A   094D           00327     CALL   SDA_HIGH       ;Set SDA high
006B   0A6D           00328     GOTO   I2C_SHIFT      ;And go to the 'I2C_SHIFT' label
006C                  00329 I2C_WRITE_0:
006C   0951           00330     CALL   SDA_LOW        ;Set SDA low
006D                  00331 I2C_SHIFT:
006D   0955           00332     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
006E   036B           00333     RLF    i2c_data, F     ;Shift 'i2c_data' one bit to the left
006F   02EA           00334     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0070   0A67           00335     GOTO   I2C_WRITE_BIT  ;If not then return to the 'I2C_WRITE_BIT'
0071                  00336 I2C_CHECK_ACK:            ;Else check the acknowledgement bit
0071   0959           00337     CALL   SCL_LOW        ;Set I2C low to end the last pulse
0072   094D           00338     CALL   SDA_HIGH       ;Set SDA high to release the bus
0073   0955           00339     CALL   SCL_HIGH       ;Set I2C high to start the new pulse
0074   0206           00340     MOVF   GPIO, W        ;Copy the GPIO register value into the 'ack'
0075   002D           00341     MOVWF  ack            ;Now bit 'sda' of the 'ack' will contain ACK bit
0076   0959           00342     CALL   SCL_LOW        ;Set SCL low to end the acknowledgement bit
0077   0800           00343     RETLW  0
                      00344 ;------------I2C read byte--------------------
0078                  00345 I2C_READ_BYTE:
0078   0C08           00346     MOVLW  8              ;Load value 8 into 'bit_count'
0079   002A           00347     MOVWF  bit_count      ;to indicate we're going to receive 8 bits
007A   006B           00348     CLRF   i2c_data       ;Clear the 'i2c_data' register
007B                  00349 I2C_READ_BIT:             ;Read single bit from the I2C
007B   036B           00350     RLF    i2c_data, F    ;Shift the 'i2c_data' register one bit to the left
007C   0959           00351     CALL   SCL_LOW        ;Set SCL low to prepare for the new bit
007D   0955           00352     CALL   SCL_HIGH       ;Set SCL high to read the bit value
007E   0646           00353     BTFSC  GPIO, SDA      ;Check the 'sda' bit in the GPIO register
007F   050B           00354     BSF    i2c_data, 0    ;if it's 1 then set the LSB of the 'i2c_data'
0080   02EA           00355     DECFSZ bit_count, F   ;Decrement the 'bit_count' value, check if it's 0
0081   0A7B           00356     GOTO   I2C_READ_BIT   ;If not, then return to the 'I2C_READ_BIT'
0082   0959           00357     CALL   SCL_LOW        ;Set SCL low to end the last pulse
0083   0800           00358     RETLW  0              ;Otherwise return from the subroutine
                      00359 ;----------I2C send ACK----------------------
0084                  00360 I2C_ACK:
0084   0951           00361     CALL   SDA_LOW        ;Set SDA low to issue ACK condition
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0085   0955           00362     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
0086   0959           00363     CALL   SCL_LOW        ;Set SCL low to end the pulse
0087   094D           00364     CALL   SDA_HIGH       ;Set SDA high to release the bus
0088   0800           00365     RETLW  0
                      00366 ;----------I2C send NACK----------------------
0089                  00367 I2C_NACK:
0089   094D           00368     CALL   SDA_HIGH       ;Set SDA low to issue NACK condition
008A   0955           00369     CALL   SCL_HIGH       ;Set SCL high to start the new pulse
008B   0959           00370     CALL   SCL_LOW        ;Set SCL low to end the pulse
008C   0800           00371     RETLW  0
                      00372 ;-------------Delay subroutine--------------
008D                  00373 DELAY:                    ;Start DELAY subroutine here  
008D   0028           00374     MOVWF  i              ;Copy the value to the register i
008E   0029           00375     MOVWF  j              ;Copy the value to the register j
008F                  00376 DELAY_LOOP:               ;Start delay loop
008F   02E8           00377     DECFSZ i, F           ;Decrement i and check if it is not zero
0090   0A8F           00378     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0091   02E9           00379     DECFSZ j, F           ;Decrement j and check if it is not zero
0092   0A8F           00380     GOTO   DELAY_LOOP     ;If not, then go to the DELAY_LOOP label
0093   0800           00381     RETLW  0              ;Else return from the subroutine
                      00382 ;##############################################################################
                      00383 ;---IR REMOTE CONTROL 38kHz ROUTINE----------------/[NEC]\---------------------
                      00384 ;##############################################################################
0094                  00385 _LOOP:                    ;Main loop of the program
                      00386 ;---------------Wait for the preamble positive pulse---------------------
0094   0666           00387     BTFSC GPIO, IRx       ;Wait while 'ir' pin goes down
0095   0A94           00388     GOTO _LOOP           ;If it's high then return to 'LOOP'
0096   0061           00389     CLRF  TMR0           ;Otherwise clear the timer register
0097   0766           00390     BTFSS GPIO, IRx       ;And wait while 'ir' is low
0098   0A97           00391     GOTO  $-1
0099   0201           00392     MOVF  TMR0, W        ;Copy the TMR0 value into the W register
009A   0031           00393     MOVWF _count         ;and save the value into the 'count' register
009B   0C1E           00394     MOVLW d'30'          ;Load 30 into W (256 us x 32 = 7.7 ms)
009C   0091           00395     SUBWF _count, W      ;And subtract W from 'count'
009D   0703           00396     BTFSS STATUS, C      ;If 'count' < 30 (pulse is shorter than 7.7 ms)
009E   0A94           00397     GOTO  _LOOP          ;then return to 'LOOP'
009F   0C2D           00398     MOVLW d'45'          ;Load 45 into W (256 us x 45 = 11.5 ms)
00A0   0091           00399     SUBWF _count, W      ;And subtract W from 'count'
00A1   0603           00400     BTFSC STATUS, C      ;If 'count' > 45 (pulse is longer than 8 ms)
00A2   0A94           00401     GOTO _LOOP           ;then return to 'LOOP'
                      00402 ;---------------Check the preamble negative pulse---------------------
00A3   0061           00403     CLRF TMR0            ;Otherwise clear the timer register
00A4   0666           00404     BTFSC GPIO, IRx       ;And wait while 'ir' is high
00A5   0AA4           00405     GOTO $-1
00A6   0201           00406     MOVF TMR0, W         ;Copy the TMR0 value into the W register
00A7   0031           00407     MOVWF _count         ;and save the value into the 'count' register
00A8   0C0D           00408     MOVLW d'13'          ;Load 15 into W (256 us x 13 = 3.3 ms)
00A9   0091           00409     SUBWF _count, W      ;And subtract W from 'count'
00AA   0703           00410     BTFSS STATUS, C      ;If 'count' < 13 (pulse is shorter than 3.3 ms)
00AB   0A94           00411     GOTO _LOOP           ;then return to 'LOOP'
00AC   0C14           00412     MOVLW d'20'          ;Load 20 into W (256 us x 20 = 5.1 ms)
00AD   0091           00413     SUBWF _count, W      ;And subtract W from 'count'
00AE   0603           00414     BTFSC STATUS, C      ;If 'count' > 20 (pulse is longer than 5.1 ms)
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AF   0A94           00415     GOTO _LOOP           ;then return to 'LOOP'
                      00416 ;---------------Receive the command bytes-----------------------------
00B0   0072           00417     CLRF _byte_count     ;Clear the 'byte_count' register    
00B1   0C14           00418     MOVLW _ir_data       ;Load the address of the 'ir_data' into W
00B2   0024           00419     MOVWF FSR            ;and save it to the indirect pointer register
00B3                  00420 _RECEIVE_BYTE:
00B3   0073           00421     CLRF _bit_count      ;Clear the 'bit_count' register
00B4   0060           00422     CLRF INDF            ;Clear the indirectly addressed register
00B5                  00423 _RECEIVE_BIT:
00B5   0320           00424     RRF INDF, F          ;Shift the INDF register to the right
                      00425 ;---------------Receive the positive pulse of the bit-----------------
00B6   0061           00426     CLRF TMR0           ;Otherwise clear the timer register
00B7   0766           00427     BTFSS GPIO, IRx      ;And wait while 'ir' is low
00B8   0AB7           00428     GOTO $-1
00B9   0201           00429     MOVF TMR0, W        ;Copy the TMR0 value into the W register
00BA   0031           00430     MOVWF _count         ;and save the value into the 'count' register
00BB   0C01           00431     MOVLW 1             ;Load 1 into W (256 us x 1 = 0.26 ms)
00BC   0091           00432     SUBWF _count, W      ;And subtract W from 'count'
00BD   0703           00433     BTFSS STATUS, C     ;If 'count' < 1 (pulse is shorter than 0.26 ms)
00BE   0A94           00434     GOTO _LOOP           ;then return to 'LOOP'
00BF   0C03           00435     MOVLW 3             ;Load 3 into W (256 us x 3 = 0.77 ms)
00C0   0091           00436     SUBWF _count, W      ;And subtract W from 'count'
00C1   0603           00437     BTFSC STATUS, C     ;If 'count' > 3 (pulse is longer than 0.77 ms)
00C2   0A94           00438     GOTO _LOOP           ;then return to 'LOOP'
                      00439 ;---------------Receive the negative pulse of the bit-----------------
00C3   0061           00440     CLRF TMR0           ;Otherwise clear the timer register
00C4   0666           00441     BTFSC GPIO, IRx     ;And wait while 'ir' is high
00C5   0AC4           00442     GOTO $-1
00C6   0201           00443     MOVF TMR0, W        ;Copy the TMR0 value into the W register
00C7   0031           00444     MOVWF _count        ;and save the value into the 'count' register
00C8   0C04           00445     MOVLW 4;///////////             ;Load 5 into W (256 us x 4 = 1.1 ms)
00C9   0091           00446     SUBWF _count, W      ;And subtract W from 'count'
00CA   0703           00447     BTFSS STATUS, C     ;If 'count' < 4 (pulse is shorter than 1.1 ms)
00CB   0AD1           00448     GOTO _NEXT_BIT       ;then go to the 'NEXT_BIT' label
00CC   0C08           00449     MOVLW 8             ;Load 8 into W (256 us x 8 = 2 ms)
00CD   0091           00450     SUBWF _count, W      ;And subtract W from 'count'
00CE   0603           00451     BTFSC STATUS, C     ;If 'count' > 8 (pulse is longer than 2 ms)
00CF   0A94           00452     GOTO _LOOP           ;then go to the 'LOOP' label
00D0   05E0           00453     BSF INDF, 7         ;Set the MSB of the INDF register
00D1                  00454 _NEXT_BIT:
00D1   02B3           00455     INCF _bit_count, F   ;Increment the 'bit_count' register
00D2   0773           00456     BTFSS _bit_count, 3  ;Check if 'bit_count' becomes 8
00D3   0AB5           00457     GOTO _RECEIVE_BIT    ;If it's not, then return to 'RECEIVE_BIT' label
00D4   02B2           00458     INCF _byte_count, F  ;Increment the 'byte_count' register
00D5   0652           00459     BTFSC _byte_count, 2 ;Check if 'byte_count' becomes 4    
00D6   0AD9           00460     GOTO _CHECK_DATA     ;If it is then go to 'CHECK_DATA' label
00D7   02A4           00461     INCF FSR, F         ;Increment the indirect addressing pointer
00D8   0AB3           00462     GOTO _RECEIVE_BYTE   ;and go to 'RECEIVE_BYTE' label
                      00463 
00D9                  00464 _CHECK_DATA:
00D9   0255           00465     COMF _ir_data+1, W   ;Negate the second received byte
00DA   0194           00466     XORWF _ir_data, W    ;And implement the XOR between 1st and 2nd bytes
00DB   0743           00467     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DC   0A94           00468     GOTO _LOOP           ;Then return to the 'LOOP' label
00DD   0257           00469     COMF _ir_data+3, W   ;Negate the fourth received byte
00DE   0196           00470     XORWF _ir_data+2, W  ;And implement the XOR between 3rd and 4th bytes
00DF   0743           00471     BTFSS STATUS, Z      ;If the result is not 0 (bytes are not equal)
00E0   0A94           00472     GOTO _LOOP           ;Then return to the 'LOOP' label
                      00473 
00E1   0C05           00474     MOVLW 0x05           ;Check the VOL- button (code 0x05)
00E2   0196           00475     XORWF _ir_data+2, W  ;If command is not 0x05
00E3   0743           00476     BTFSS STATUS, Z
00E4   0AE6           00477     GOTO $+2             ;then skip the next line
00E5   0A2D           00478         goto DECREASE_VOLUME
                      00479 
00E6   0C06           00480     MOVLW 0x06           ;Check the VOL+ button (code 0x06)
00E7   0196           00481     XORWF _ir_data+2, W  ;If command is not 0x06
00E8   0743           00482     BTFSS STATUS, Z
00E9   0AEB           00483     GOTO $+2             ;then skip the next line
00EA   0A29           00484         goto INCREASE_VOLUME
                      00485 
00EB   0C02           00486     MOVLW 0x02           ;Check the << CH- button (code 0x02)
00EC   0196           00487     XORWF _ir_data+2, W  ;If command is not 0x02
00ED   0743           00488     BTFSS STATUS, Z
00EE   0AF0           00489     GOTO $+2             ;then skip the next line
00EF   0A44           00490         goto SEEK_DOWN 
                      00491 
00F0   0C03           00492     MOVLW 0x03           ;Check the W button (code 0x03)
00F1   0196           00493     XORWF _ir_data+2, W  ;If command is not 0x03
00F2   0743           00494     BTFSS STATUS, Z
00F3   0AF5           00495     GOTO $+2    ;$+2   ;then skip the next three lines
00F4   0A3B           00496         goto CH_UP ;////////////////////////
                      00497 
00F5   0A94           00498     GOTO _LOOP           ;and go to the 'SET_OUTPUT' label
                      00499 
                      00500     END                   ;/* END of the Program */
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE 11


SYMBOL TABLE
  LABEL                             VALUE 

C                                 00000000
CAL0                              00000001
CAL1                              00000002
CAL2                              00000003
CAL3                              00000004
CAL4                              00000005
CAL5                              00000006
CAL6                              00000007
CH_UP                             0000003B
DC                                00000001
DECREASE_VOLUME                   0000002D
DELAY                             0000008D
DELAY_LOOP                        0000008F
F                                 00000001
FOSC4                             00000000
FSR                               00000004
GP0                               00000000
GP1                               00000001
GP2                               00000002
GP3                               00000003
GPIO                              00000006
GPWUF                             00000007
I2C_ACK                           00000084
I2C_CHECK_ACK                     00000071
I2C_NACK                          00000089
I2C_READ_BIT                      0000007B
I2C_READ_BYTE                     00000078
I2C_SHIFT                         0000006D
I2C_START                         0000005D
I2C_STOP                          00000060
I2C_WRITE_0                       0000006C
I2C_WRITE_1                       0000006A
I2C_WRITE_BIT                     00000067
I2C_WRITE_BYTE                    00000064
INCREASE_VOLUME                   00000029
INDF                              00000000
INIT                              00000002
IRx                               00000003
LOOP                              00000029
MAXRAM                            0000001F
NOT_GPPU                          00000006
NOT_GPWU                          00000007
NOT_PD                            00000003
NOT_TO                            00000004
OSCCAL                            00000005
PCL                               00000002
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
RAM                               00000008
RAM_                              00000018
SCL                               00000001
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

SCL_HIGH                          00000055
SCL_LOW                           00000059
SDA                               00000002
SDA_HIGH                          0000004D
SDA_LOW                           00000051
SEEK_DOWN                         00000044
SET_VOLUME                        00000030
STATUS                            00000003
T0CS                              00000005
T0SE                              00000004
TMR0                              00000001
TRISIO0                           00000000
TRISIO1                           00000001
TRISIO2                           00000002
TRISIO3                           00000003
W                                 00000000
Z                                 00000002
_CHECK_DATA                       000000D9
_CONFIG                           00000FFF
_CP_OFF                           00000FFF
_CP_ON                            00000FF7
_IDLOC0                           00000200
_IDLOC1                           00000201
_IDLOC2                           00000202
_IDLOC3                           00000203
_IntRC_OSC                        00000FFF
_LOOP                             00000094
_MCLRE_OFF                        00000FEF
_MCLRE_ON                         00000FFF
_NEXT_BIT                         000000D1
_OSC_IntRC                        00000FFF
_RECEIVE_BIT                      000000B5
_RECEIVE_BYTE                     000000B3
_WDTE_OFF                         00000FFB
_WDTE_ON                          00000FFF
_WDT_OFF                          00000FFB
_WDT_ON                           00000FFF
__10F202                          00000001
_bit_count                        00000013
_byte_count                       00000012
_count                            00000011
_ir_data                          00000014
ack                               0000000D
bit_count                         0000000A
freq                              00000397
freqB                             00000031
freqH                             0000000C
freqL                             00000040
frequency_h                       00000010
frequency_l                       0000000F
i                                 00000008
i2c_data                          0000000B
j                                 00000009
MPASM  5.51              PIC20X_PIC12F50X.ASM   8-30-2025  21:16:23         PAGE 13


SYMBOL TABLE
  LABEL                             VALUE 

port                              0000000C
volume                            0000000E
volume_init                       00000083


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX----------
0200 : XXXX------------ ---------------- ---------------- ----------------
0FC0 : ---------------- ---------------- ---------------- ---------------X

All other memory blocks unused.

Program Memory Words Used:   246
Program Memory Words Free:   266


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

